{
	"class": "vulnerability",
	"id": "oval:com.ubuntu.noble:def:2024410100000000",
	"version": "1",
	"metadata": {
		"title": "CVE-2024-41010 on Ubuntu 24.04 LTS (noble) - medium",
		"description": "In the Linux kernel, the following vulnerability has been resolved:bpf: Fix too early release of tcx_entryPedro Pinto and later independently also Hyunwoo Kim and Wongi Lee reportedan issue that the tcx_entry can be released too early leading to a useafter free (UAF) when an active old-style ingress or clsact qdisc with ashared tc block is later replaced by another ingress or clsact instance.Essentially, the sequence to trigger the UAF (one example) can be asfollows:  1. A network namespace is created  2. An ingress qdisc is created. This allocates a tcx_entry, and     &tcx_entry->miniq is stored in the qdisc's miniqp->p_miniq. At the     same time, a tcf block with index 1 is created.  3. chain0 is attached to the tcf block. chain0 must be connected to     the block linked to the ingress qdisc to later reach the function     tcf_chain0_head_change_cb_del() which triggers the UAF.  4. Create and graft a clsact qdisc. This causes the ingress qdisc     created in step 1 to be removed, thus freeing the previously linked     tcx_entry:     rtnetlink_rcv_msg()       => tc_modify_qdisc()         => qdisc_create()           => clsact_init() [a]         => qdisc_graft()           => qdisc_destroy()             => __qdisc_destroy()               => ingress_destroy() [b]                 => tcx_entry_free()                   => kfree_rcu() // tcx_entry freed  5. Finally, the network namespace is closed. This registers the     cleanup_net worker, and during the process of releasing the     remaining clsact qdisc, it accesses the tcx_entry that was     already freed in step 4, causing the UAF to occur:     cleanup_net()       => ops_exit_list()         => default_device_exit_batch()           => unregister_netdevice_many()             => unregister_netdevice_many_notify()               => dev_shutdown()                 => qdisc_put()                   => clsact_destroy() [c]                     => tcf_block_put_ext()                       => tcf_chain0_head_change_cb_del()                         => tcf_chain_head_change_item()                           => clsact_chain_head_change()                             => mini_qdisc_pair_swap() // UAFThere are also other variants, the gist is to add an ingress (or clsact)qdisc with a specific shared block, then to replace that qdisc, waitingfor the tcx_entry kfree_rcu() to be executed and subsequently accessingthe current active qdisc's miniq one way or another.The correct fix is to turn the miniq_active boolean into a counter. Whatcan be observed, at step 2 above, the counter transitions from 0->1, atstep [a] from 1->2 (in order for the miniq object to remain active duringthe replacement), then in [b] from 2->1 and finally [c] 1->0 with theeventual release. The reference counter in general ranges from [0,2] andit does not need to be atomic since all access to the counter is protectedby the rtnl mutex. With this in place, there is no longer a UAF happeningand the tcx_entry is freed at the correct time.",
		"affected": {
			"family": "unix",
			"platform": "Ubuntu 24.04 LTS"
		},
		"reference": {
			"source": "CVE",
			"ref_id": "CVE-2024-41010",
			"ref_url": "https://www.cve.org/CVERecord?id=CVE-2024-41010"
		},
		"advisory": {
			"severity": "Medium",
			"rights": "Copyright (C) 2024 Canonical Ltd.",
			"public_date": "2024-07-17 07:15:00 UTC",
			"cve": {
				"text": "CVE-2024-41010",
				"href": "https://ubuntu.com/security/CVE-2024-41010",
				"public": "20240717",
				"cvss_score": "5.5",
				"cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H"
			}
		}
	},
	"notes": {},
	"criteria": {
		"criterias": [
			{
				"operator": "OR",
				"criterions": [
					{
						"test_ref": "oval:com.ubuntu.noble:tst:201245420000000",
						"comment": "linux package in noble is affected. An update containing the fix has been completed and is pending publication."
					},
					{
						"test_ref": "oval:com.ubuntu.noble:tst:201245420000010",
						"comment": "linux-aws package in noble is affected and needs fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.noble:tst:201245420000030",
						"comment": "linux-azure package in noble is affected and needs fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.noble:tst:201245420000040",
						"comment": "linux-gcp package in noble is affected and needs fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.noble:tst:201245420000020",
						"comment": "linux-gke package in noble is affected and needs fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.noble:tst:201245420000070",
						"comment": "linux-ibm package in noble is affected and needs fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.noble:tst:201245420000100",
						"comment": "linux-intel package in noble is affected and needs fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.noble:tst:201245420000080",
						"comment": "linux-lowlatency package in noble is affected and needs fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.noble:tst:201245420000050",
						"comment": "linux-oracle package in noble is affected and needs fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.noble:tst:201245420000090",
						"comment": "linux-oem-6.8 package in noble is affected and needs fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.noble:tst:201245420000060",
						"comment": "linux-raspi package in noble is affected and needs fixing."
					}
				]
			}
		]
	}
}
