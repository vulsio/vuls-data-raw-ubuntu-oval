{
	"class": "vulnerability",
	"id": "oval:com.ubuntu.noble:def:2024268370000000",
	"version": "1",
	"metadata": {
		"title": "CVE-2024-26837 on Ubuntu 24.04 LTS (noble) - medium",
		"description": "In the Linux kernel, the following vulnerability has been resolved: net:bridge: switchdev: Skip MDB replays of deferred events on offload Beforethis change, generation of the list of MDB events to replay would raceagainst the creation of new group memberships, either from the IGMP/MLDsnooping logic or from user configuration. While new memberships areimmediately visible to walkers of br->mdb_list, the notification of theirexistence to switchdev event subscribers is deferred until a later point intime. So if a replay list was generated during a time that overlapped withsuch a window, it would also contain a replay of the not-yet-deliveredevent. The driver would thus receive two copies of what the bridgeinternally considered to be one single event. On destruction of the bridge,only a single membership deletion event was therefore sent. As aconsequence of this, drivers which reference count memberships (at leastDSA), would be left with orphan groups in their hardware database when thebridge was destroyed. This is only an issue when replaying additions. Whiledeletion events may still be pending on the deferred queue, they willalready have been removed from br->mdb_list, so no duplicates can begenerated in that scenario. To a user this meant that old groupmemberships, from a bridge in which a port was previously attached, couldbe reanimated (in hardware) when the port joined a new bridge, without thenew bridge's knowledge. For example, on an mv88e6xxx system, create asnooping bridge and immediately add a port to it: root@infix-06-0b-00:~$ iplink add dev br0 up type bridge mcast_snooping 1 && \\ > ip link set dev x3up master br0 And then destroy the bridge: root@infix-06-0b-00:~$ ip linkdel dev br0 root@infix-06-0b-00:~$ mvls atu ADDRESS FID STATE Q F 0 1 2 3 45 6 7 8 9 a DEV:0 Marvell 88E6393X 33:33:00:00:00:6a 1 static - - 0 . . . .. . . . . . 33:33:ff:87:e4:3f 1 static - - 0 . . . . . . . . . .ff:ff:ff:ff:ff:ff 1 static - - 0 1 2 3 4 5 6 7 8 9 a root@infix-06-0b-00:~$The two IPv6 groups remain in the hardware database because the port (x3)is notified of the host's membership twice: once via the original event andonce via a replay. Since only a single delete notification is sent, thecount remains at 1 when the bridge is destroyed. Then add the same port (oranother port belonging to the same hardware domain) to a new bridge, thistime with snooping disabled: root@infix-06-0b-00:~$ ip link add dev br1 uptype bridge mcast_snooping 0 && \\ > ip link set dev x3 up master br1 Allmulticast, including the two IPv6 groups from br0, should now be flooded,according to the policy of br1. But instead the old memberships are stillactive in the hardware database, causing the switch to only forward trafficto those groups towards the CPU (port 0). Eliminate the race in two steps:1. Grab the write-side lock of the MDB while generating the replay list.This prevents new memberships from showing up while we are generating thereplay list. But it leaves the scenario in which a deferred event wasalready generated, but not delivered, before we grabbed the lock.Therefore: 2. Make sure that no deferred version of a replay event isalready enqueued to the switchdev deferred queue, before adding it to thereplay list, when replaying additions.",
		"affected": {
			"family": "unix",
			"platform": "Ubuntu 24.04 LTS"
		},
		"reference": {
			"source": "CVE",
			"ref_id": "CVE-2024-26837",
			"ref_url": "https://www.cve.org/CVERecord?id=CVE-2024-26837"
		},
		"advisory": {
			"severity": "Medium",
			"rights": "Copyright (C) 2024 Canonical Ltd.",
			"public_date": "2024-04-17 10:15:00 UTC",
			"cve": {
				"text": "CVE-2024-26837",
				"href": "https://ubuntu.com/security/CVE-2024-26837",
				"public": "20240417"
			}
		}
	},
	"notes": {},
	"criteria": {
		"criterias": [
			{
				"operator": "OR",
				"criterions": [
					{
						"test_ref": "oval:com.ubuntu.noble:tst:201245420000000",
						"comment": "linux package in noble is affected and may need fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.noble:tst:201245420000010",
						"comment": "linux-aws package in noble is affected and may need fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.noble:tst:201245420000030",
						"comment": "linux-azure package in noble is affected and may need fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.noble:tst:201245420000040",
						"comment": "linux-gcp package in noble is affected and may need fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.noble:tst:201245420000020",
						"comment": "linux-gke package in noble is affected and may need fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.noble:tst:201245420000070",
						"comment": "linux-ibm package in noble is affected and may need fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.noble:tst:201245420000080",
						"comment": "linux-lowlatency package in noble is affected and may need fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.noble:tst:201245420000050",
						"comment": "linux-oracle package in noble is affected and may need fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.noble:tst:201245420000060",
						"comment": "linux-raspi package in noble is affected and may need fixing."
					}
				]
			}
		]
	}
}
