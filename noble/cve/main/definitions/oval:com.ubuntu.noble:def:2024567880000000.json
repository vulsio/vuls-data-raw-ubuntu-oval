{
	"class": "vulnerability",
	"id": "oval:com.ubuntu.noble:def:2024567880000000",
	"version": "1",
	"metadata": {
		"title": "CVE-2024-56788 on Ubuntu 24.04 LTS (noble) - medium",
		"description": "In the Linux kernel, the following vulnerability has been resolved:net: ethernet: oa_tc6: fix tx skb race condition between reference pointersThere are two skb pointers to manage tx skb's enqueued from n/w stack.waiting_tx_skb pointer points to the tx skb which needs to be processedand ongoing_tx_skb pointer points to the tx skb which is being processed.SPI thread prepares the tx data chunks from the tx skb pointed by theongoing_tx_skb pointer. When the tx skb pointed by the ongoing_tx_skb isprocessed, the tx skb pointed by the waiting_tx_skb is assigned toongoing_tx_skb and the waiting_tx_skb pointer is assigned with NULL.Whenever there is a new tx skb from n/w stack, it will be assigned towaiting_tx_skb pointer if it is NULL. Enqueuing and processing of a tx skbhandled in two different threads.Consider a scenario where the SPI thread processed an ongoing_tx_skb andit moves next tx skb from waiting_tx_skb pointer to ongoing_tx_skb pointerwithout doing any NULL check. At this time, if the waiting_tx_skb pointeris NULL then ongoing_tx_skb pointer is also assigned with NULL. Afterthat, if a new tx skb is assigned to waiting_tx_skb pointer by the n/wstack and there is a chance to overwrite the tx skb pointer with NULL inthe SPI thread. Finally one of the tx skb will be left as unhandled,resulting packet missing and memory leak.- Consider the below scenario where the TXC reported from the previoustransfer is 10 and ongoing_tx_skb holds an tx ethernet frame which can betransported in 20 TXCs and waiting_tx_skb is still NULL.\ttx_credits = 10; /* 21 are filled in the previous transfer */\tongoing_tx_skb = 20;\twaiting_tx_skb = NULL; /* Still NULL */- So, (tc6->ongoing_tx_skb || tc6->waiting_tx_skb) becomes true.- After oa_tc6_prepare_spi_tx_buf_for_tx_skbs()\tongoing_tx_skb = 10;\twaiting_tx_skb = NULL; /* Still NULL */- Perform SPI transfer.- Process SPI rx buffer to get the TXC from footers.- Now let's assume previously filled 21 TXCs are freed so we are good totransport the next remaining 10 tx chunks from ongoing_tx_skb.\ttx_credits = 21;\tongoing_tx_skb = 10;\twaiting_tx_skb = NULL;- So, (tc6->ongoing_tx_skb || tc6->waiting_tx_skb) becomes true again.- In the oa_tc6_prepare_spi_tx_buf_for_tx_skbs()\tongoing_tx_skb = NULL;\twaiting_tx_skb = NULL;- Now the below bad case might happen,Thread1 (oa_tc6_start_xmit)\tThread2 (oa_tc6_spi_thread_handler)---------------------------\t------------------------------------ if waiting_tx_skb is NULL\t\t\t\t- if ongoing_tx_skb is NULL\t\t\t\t- ongoing_tx_skb = waiting_tx_skb- waiting_tx_skb = skb\t\t\t\t- waiting_tx_skb = NULL\t\t\t\t...\t\t\t\t- ongoing_tx_skb = NULL- if waiting_tx_skb is NULL- waiting_tx_skb = skbTo overcome the above issue, protect the moving of tx skb reference fromwaiting_tx_skb pointer to ongoing_tx_skb pointer and assigning new tx skbto waiting_tx_skb pointer, so that the other thread can't access thewaiting_tx_skb pointer until the current thread completes moving the txskb reference safely.",
		"affected": {
			"family": "unix",
			"platform": "Ubuntu 24.04 LTS"
		},
		"reference": {
			"source": "CVE",
			"ref_id": "CVE-2024-56788",
			"ref_url": "https://www.cve.org/CVERecord?id=CVE-2024-56788"
		},
		"advisory": {
			"severity": "Medium",
			"rights": "Copyright (C) 2025 Canonical Ltd.",
			"public_date": "2025-01-11 13:15:00 UTC",
			"cve": {
				"text": "CVE-2024-56788",
				"href": "https://ubuntu.com/security/CVE-2024-56788",
				"public": "20250111"
			}
		}
	},
	"notes": {},
	"criteria": {
		"criterias": [
			{
				"operator": "OR",
				"criterions": [
					{
						"test_ref": "oval:com.ubuntu.noble:tst:201245420000000",
						"comment": "linux package in noble is affected and needs fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.noble:tst:201245420000010",
						"comment": "linux-aws package in noble is affected and needs fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.noble:tst:201245420000030",
						"comment": "linux-azure package in noble is affected and needs fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.noble:tst:201245420000040",
						"comment": "linux-gcp package in noble is affected and needs fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.noble:tst:201245420000020",
						"comment": "linux-gke package in noble is affected and needs fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.noble:tst:201245420000070",
						"comment": "linux-ibm package in noble is affected and needs fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.noble:tst:201245420000080",
						"comment": "linux-lowlatency package in noble is affected and needs fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.noble:tst:201245420000050",
						"comment": "linux-oracle package in noble is affected and needs fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.noble:tst:201245420000090",
						"comment": "linux-oem-6.8 package in noble is affected and needs fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.noble:tst:201245420000060",
						"comment": "linux-raspi package in noble is affected and needs fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.noble:tst:201245420000100",
						"comment": "linux-intel package in noble is affected and needs fixing."
					}
				]
			}
		]
	}
}
