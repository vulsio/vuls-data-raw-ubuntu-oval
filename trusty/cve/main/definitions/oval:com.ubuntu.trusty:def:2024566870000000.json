{
	"class": "vulnerability",
	"id": "oval:com.ubuntu.trusty:def:2024566870000000",
	"version": "1",
	"metadata": {
		"title": "CVE-2024-56687 on Ubuntu 14.04 LTS (trusty) - medium",
		"description": "In the Linux kernel, the following vulnerability has been resolved:usb: musb: Fix hardware lockup on first Rx endpoint requestThere is a possibility that a request's callback could be invoked fromusb_ep_queue() (call trace below, supplemented with missing calls):req->complete from usb_gadget_giveback_request\t(drivers/usb/gadget/udc/core.c:999)usb_gadget_giveback_request from musb_g_giveback\t(drivers/usb/musb/musb_gadget.c:147)musb_g_giveback from rxstate\t(drivers/usb/musb/musb_gadget.c:784)rxstate from musb_ep_restart\t(drivers/usb/musb/musb_gadget.c:1169)musb_ep_restart from musb_ep_restart_resume_work\t(drivers/usb/musb/musb_gadget.c:1176)musb_ep_restart_resume_work from musb_queue_resume_work\t(drivers/usb/musb/musb_core.c:2279)musb_queue_resume_work from musb_gadget_queue\t(drivers/usb/musb/musb_gadget.c:1241)musb_gadget_queue from usb_ep_queue\t(drivers/usb/gadget/udc/core.c:300)According to the docstring of usb_ep_queue(), this should not happen:\"Note that @req's ->complete() callback must never be called from withinusb_ep_queue() as that can create deadlock situations.\"In fact, a hardware lockup might occur in the following sequence:1. The gadget is initialized using musb_gadget_enable().2. Meanwhile, a packet arrives, and the RXPKTRDY flag is set, raising an   interrupt.3. If IRQs are enabled, the interrupt is handled, but musb_g_rx() finds an   empty queue (next_request() returns NULL). The interrupt flag has   already been cleared by the glue layer handler, but the RXPKTRDY flag   remains set.4. The first request is enqueued using usb_ep_queue(), leading to the call   of req->complete(), as shown in the call trace above.5. If the callback enables IRQs and another packet is waiting, step (3)   repeats. The request queue is empty because usb_g_giveback() removes the   request before invoking the callback.6. The endpoint remains locked up, as the interrupt triggered by hardware   setting the RXPKTRDY flag has been handled, but the flag itself remains   set.For this scenario to occur, it is only necessary for IRQs to be enabled atsome point during the complete callback. This happens with the USB Ethernetgadget, whose rx_complete() callback calls netif_rx(). If called in thetask context, netif_rx() disables the bottom halves (BHs). When the BHs arere-enabled, IRQs are also enabled to allow soft IRQs to be processed. Thegadget itself is initialized at module load (or at boot if built-in), butthe first request is enqueued when the network interface is brought up,triggering rx_complete() in the task context via ioctl(). If a packetarrives while the interface is down, it can prevent the interface fromreceiving any further packets from the USB host.The situation is quite complicated with many parties involved. Thisparticular issue can be resolved in several possible ways:1. Ensure that callbacks never enable IRQs. This would be difficult to   enforce, as discovering how netif_rx() interacts with interrupts was   already quite challenging and u_ether is not the only function driver.   Similar \"bugs\" could be hidden in other drivers as well.2. Disable MUSB interrupts in musb_g_giveback() before calling the callback   and re-enable them afterwars (by calling musb_{dis,en}able_interrupts(),   for example). This would ensure that MUSB interrupts are not handled   during the callback, even if IRQs are enabled. In fact, it would allow   IRQs to be enabled when releasing the lock. However, this feels like an   inelegant hack.3. Modify the interrupt handler to clear the RXPKTRDY flag if the request   queue is empty. While this approach also feels like a hack, it wastes   CPU time by attempting to handle incoming packets when the software is   not ready to process them.4. Flush the Rx FIFO instead of calling rxstate() in musb_ep_restart().   This ensures that the hardware can receive packets when there is at   least one request in the queue. Once I---truncated---\n\n    Update Instructions:\n\n    Run `sudo pro fix CVE-2024-56687` to fix the vulnerability. The problem can be corrected\n    by updating your system to the following package versions:\n\nlinux-image-3.11.0-12-generic - 3.11.0-12.19\nlinux-image-3.11.0-12-generic-lpae - 3.11.0-12.19\nlinux-image-extra-3.11.0-12-generic - 3.11.0-12.19\nNo subscription required\n\nlinux-image-4.4.0-13-generic - 4.4.0-13.29~14.04.1\nlinux-image-4.4.0-13-generic-lpae - 4.4.0-13.29~14.04.1\nlinux-image-4.4.0-13-lowlatency - 4.4.0-13.29~14.04.1\nlinux-image-4.4.0-13-powerpc-e500mc - 4.4.0-13.29~14.04.1\nlinux-image-4.4.0-13-powerpc-smp - 4.4.0-13.29~14.04.1\nlinux-image-4.4.0-13-powerpc64-emb - 4.4.0-13.29~14.04.1\nlinux-image-4.4.0-13-powerpc64-smp - 4.4.0-13.29~14.04.1\nlinux-image-extra-4.4.0-13-generic - 4.4.0-13.29~14.04.1\nNo subscription required\n\nlinux-image-4.4.0-1002-aws - 4.4.0-1002.2\nNo subscription required\n\nlinux-image-unsigned-4.15.0-1023-azure - 4.15.0-1023.24~14.04.1\nNo subscription required",
		"affected": {
			"family": "unix",
			"platform": "Ubuntu 14.04 LTS"
		},
		"reference": {
			"source": "CVE",
			"ref_id": "CVE-2024-56687",
			"ref_url": "https://www.cve.org/CVERecord?id=CVE-2024-56687"
		},
		"advisory": {
			"severity": "Medium",
			"rights": "Copyright (C) 2024 Canonical Ltd.",
			"public_date": "2024-12-28 10:15:00 UTC",
			"cve": {
				"text": "CVE-2024-56687",
				"href": "https://ubuntu.com/security/CVE-2024-56687",
				"public": "20241228"
			}
		}
	},
	"notes": {},
	"criteria": {
		"criterias": [
			{
				"operator": "OR",
				"criterions": [
					{
						"test_ref": "oval:com.ubuntu.trusty:tst:200636350000000",
						"comment": "linux package in trusty, is related to the CVE in some way and has been fixed (note: '3.11.0-12.19')."
					},
					{
						"test_ref": "oval:com.ubuntu.trusty:tst:200636350000100",
						"comment": "linux-lts-xenial package in trusty, is related to the CVE in some way and has been fixed (note: '4.4.0-13.29~14.04.1')."
					},
					{
						"test_ref": "oval:com.ubuntu.trusty:tst:200636350000110",
						"comment": "linux-aws package in trusty, is related to the CVE in some way and has been fixed (note: '4.4.0-1002.2')."
					},
					{
						"test_ref": "oval:com.ubuntu.trusty:tst:200636350000120",
						"comment": "linux-azure package in trusty, is related to the CVE in some way and has been fixed (note: '4.15.0-1023.24~14.04.1')."
					}
				]
			}
		]
	}
}
