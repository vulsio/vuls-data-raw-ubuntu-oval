{
	"class": "vulnerability",
	"id": "oval:com.ubuntu.trusty:def:2024500990000000",
	"version": "1",
	"metadata": {
		"title": "CVE-2024-50099 on Ubuntu 14.04 LTS (trusty) - medium",
		"description": "In the Linux kernel, the following vulnerability has been resolved:arm64: probes: Remove broken LDR (literal) uprobe supportThe simulate_ldr_literal() and simulate_ldrsw_literal() functions areunsafe to use for uprobes. Both functions were originally written foruse with kprobes, and access memory with plain C accesses. When uprobeswas added, these were reused unmodified even though they cannot safelyaccess user memory.There are three key problems:1) The plain C accesses do not have corresponding extable entries, and   thus if they encounter a fault the kernel will treat these as   unintentional accesses to user memory, resulting in a BUG() which   will kill the kernel thread, and likely lead to further issues (e.g.   lockup or panic()).2) The plain C accesses are subject to HW PAN and SW PAN, and so when   either is in use, any attempt to simulate an access to user memory   will fault. Thus neither simulate_ldr_literal() nor   simulate_ldrsw_literal() can do anything useful when simulating a   user instruction on any system with HW PAN or SW PAN.3) The plain C accesses are privileged, as they run in kernel context,   and in practice can access a small range of kernel virtual addresses.   The instructions they simulate have a range of +/-1MiB, and since the   simulated instructions must itself be a user instructions in the   TTBR0 address range, these can address the final 1MiB of the TTBR1   acddress range by wrapping downwards from an address in the first   1MiB of the TTBR0 address range.   In contemporary kernels the last 8MiB of TTBR1 address range is   reserved, and accesses to this will always fault, meaning this is no   worse than (1).   Historically, it was theoretically possible for the linear map or   vmemmap to spill into the final 8MiB of the TTBR1 address range, but   in practice this is extremely unlikely to occur as this would   require either:   * Having enough physical memory to fill the entire linear map all the     way to the final 1MiB of the TTBR1 address range.   * Getting unlucky with KASLR randomization of the linear map such     that the populated region happens to overlap with the last 1MiB of     the TTBR address range.   ... and in either case if we were to spill into the final page there   would be larger problems as the final page would alias with error   pointers.Practically speaking, (1) and (2) are the big issues. Given there havebeen no reports of problems since the broken code was introduced, itappears that no-one is relying on probing these instructions withuprobes.Avoid these issues by not allowing uprobes on LDR (literal) and LDRSW(literal), limiting the use of simulate_ldr_literal() andsimulate_ldrsw_literal() to kprobes. Attempts to place uprobes on LDR(literal) and LDRSW (literal) will be rejected asarm_probe_decode_insn() will return INSN_REJECTED. In future we canconsider introducing working uprobes support for these instructions, butthis will require more significant work.\n\n    Update Instructions:\n\n    Run `sudo pro fix CVE-2024-50099` to fix the vulnerability. The problem can be corrected\n    by updating your system to the following package versions:\n\nlinux-image-3.11.0-12-generic - 3.11.0-12.19\nlinux-image-3.11.0-12-generic-lpae - 3.11.0-12.19\nlinux-image-extra-3.11.0-12-generic - 3.11.0-12.19\nNo subscription required\n\nlinux-image-4.4.0-13-generic - 4.4.0-13.29~14.04.1\nlinux-image-4.4.0-13-generic-lpae - 4.4.0-13.29~14.04.1\nlinux-image-4.4.0-13-lowlatency - 4.4.0-13.29~14.04.1\nlinux-image-4.4.0-13-powerpc-e500mc - 4.4.0-13.29~14.04.1\nlinux-image-4.4.0-13-powerpc-smp - 4.4.0-13.29~14.04.1\nlinux-image-4.4.0-13-powerpc64-emb - 4.4.0-13.29~14.04.1\nlinux-image-4.4.0-13-powerpc64-smp - 4.4.0-13.29~14.04.1\nlinux-image-extra-4.4.0-13-generic - 4.4.0-13.29~14.04.1\nNo subscription required\n\nlinux-image-4.4.0-1002-aws - 4.4.0-1002.2\nNo subscription required",
		"affected": {
			"family": "unix",
			"platform": "Ubuntu 14.04 LTS"
		},
		"reference": {
			"source": "CVE",
			"ref_id": "CVE-2024-50099",
			"ref_url": "https://www.cve.org/CVERecord?id=CVE-2024-50099"
		},
		"advisory": {
			"severity": "Medium",
			"rights": "Copyright (C) 2024 Canonical Ltd.",
			"public_date": "2024-11-05 18:15:00 UTC",
			"cve": {
				"text": "CVE-2024-50099",
				"href": "https://ubuntu.com/security/CVE-2024-50099",
				"public": "20241105",
				"cvss_score": "5.5",
				"cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H"
			}
		}
	},
	"notes": {},
	"criteria": {
		"criterias": [
			{
				"operator": "OR",
				"criterions": [
					{
						"test_ref": "oval:com.ubuntu.trusty:tst:200636350000000",
						"comment": "linux package in trusty, is related to the CVE in some way and has been fixed (note: '3.11.0-12.19')."
					},
					{
						"test_ref": "oval:com.ubuntu.trusty:tst:200636350000100",
						"comment": "linux-lts-xenial package in trusty, is related to the CVE in some way and has been fixed (note: '4.4.0-13.29~14.04.1')."
					},
					{
						"test_ref": "oval:com.ubuntu.trusty:tst:200636350000110",
						"comment": "linux-aws package in trusty, is related to the CVE in some way and has been fixed (note: '4.4.0-1002.2')."
					},
					{
						"test_ref": "oval:com.ubuntu.trusty:tst:200747740000030",
						"comment": "linux-azure: while related to the CVE in some way, a decision has been made to ignore this issue (note: 'ESM criteria, was needed')."
					}
				]
			}
		]
	}
}
