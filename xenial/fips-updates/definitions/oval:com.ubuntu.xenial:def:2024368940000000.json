{
	"class": "vulnerability",
	"id": "oval:com.ubuntu.xenial:def:2024368940000000",
	"version": "1",
	"metadata": {
		"title": "CVE-2024-36894 on Ubuntu 16.04 FIPS Compliant (xenial) - medium",
		"description": "In the Linux kernel, the following vulnerability has been resolved: usb:gadget: f_fs: Fix race between aio_cancel() and AIO request complete FFSbased applications can utilize the aio_cancel() callback to dequeue pendingUSB requests submitted to the UDC. There is a scenario where the FFSapplication issues an AIO cancel call, while the UDC is handling a softdisconnect. For a DWC3 based implementation, the callstack looks like thefollowing: DWC3 Gadget FFS Application dwc3_gadget_soft_disconnect() ...--> dwc3_stop_active_transfers() --> dwc3_gadget_giveback(-ESHUTDOWN) -->ffs_epfile_async_io_complete() ffs_aio_cancel() --> usb_ep_free_request()--> usb_ep_dequeue() There is currently no locking implemented between theAIO completion handler and AIO cancel, so the issue occurs if thecompletion routine is running in parallel to an AIO cancel call coming fromthe FFS application. As the completion call frees the USB request(io_data->req) the FFS application is also referencing it for theusb_ep_dequeue() call. This can lead to accessing a stale/hanging pointer.commit b566d38857fc (\"usb: gadget: f_fs: use io_data->status consistently\")relocated the usb_ep_free_request() into ffs_epfile_async_io_complete().However, in order to properly implement locking to mitigate this issue, thespinlock can't be added to ffs_epfile_async_io_complete(), asusb_ep_dequeue() (if successfully dequeuing a USB request) will call thefunction driver's completion handler in the same context. Hence, leadinginto a deadlock. Fix this issue by moving the usb_ep_free_request() back toffs_user_copy_worker(), and ensuring that it explicitly sets io_data->reqto NULL after freeing it within the ffs->eps_lock. This resolves the racecondition above, as the ffs_aio_cancel() routine will not continueattempting to dequeue a request that has already been freed, or theffs_user_copy_work() not freeing the USB request until the AIO cancel isdone referencing it. This fix depends on commit b566d38857fc (\"usb: gadget:f_fs: use io_data->status consistently\")",
		"affected": {
			"family": "unix",
			"platform": "Ubuntu 16.04 FIPS Compliant"
		},
		"reference": {
			"source": "CVE",
			"ref_id": "CVE-2024-36894",
			"ref_url": "https://www.cve.org/CVERecord?id=CVE-2024-36894"
		},
		"advisory": {
			"severity": "Medium",
			"rights": "Copyright (C) 2024 Canonical Ltd.",
			"public_date": "2024-05-30 16:15:00 UTC",
			"cve": {
				"text": "CVE-2024-36894",
				"href": "https://ubuntu.com/security/CVE-2024-36894",
				"public": "20240530"
			},
			"public_date_at_usn": "2024-05-30 16:15:00 UTC",
			"ref": [
				"https://ubuntu.com/security/notices/USN-6949-1",
				"https://ubuntu.com/security/notices/USN-6952-1",
				"https://ubuntu.com/security/notices/USN-6955-1",
				"https://ubuntu.com/security/notices/USN-6949-2",
				"https://ubuntu.com/security/notices/USN-6952-2",
				"https://ubuntu.com/security/notices/USN-7003-1",
				"https://ubuntu.com/security/notices/USN-7003-2",
				"https://ubuntu.com/security/notices/USN-7006-1",
				"https://ubuntu.com/security/notices/USN-7003-3",
				"https://ubuntu.com/security/notices/USN-7007-1",
				"https://ubuntu.com/security/notices/USN-7009-1",
				"https://ubuntu.com/security/notices/USN-7019-1"
			]
		}
	},
	"notes": {},
	"criteria": {
		"criterias": [
			{
				"operator": "OR",
				"criterions": [
					{
						"test_ref": "oval:com.ubuntu.xenial:tst:201245420000100",
						"comment": "linux-fips: while related to the CVE in some way, a decision has been made to ignore this issue (note: 'ESM criteria, was needed')."
					}
				]
			}
		]
	}
}
