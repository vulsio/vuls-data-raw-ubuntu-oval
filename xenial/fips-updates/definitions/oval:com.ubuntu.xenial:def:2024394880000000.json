{
	"class": "vulnerability",
	"id": "oval:com.ubuntu.xenial:def:2024394880000000",
	"version": "1",
	"metadata": {
		"title": "CVE-2024-39488 on Ubuntu 16.04 FIPS Compliant (xenial) - medium",
		"description": "In the Linux kernel, the following vulnerability has been resolved:arm64: asm-bug: Add .align 2 to the end of __BUG_ENTRYWhen CONFIG_DEBUG_BUGVERBOSE=n, we fail to add necessary padding bytesto bug_table entries, and as a result the last entry in a bug table willbe ignored, potentially leading to an unexpected panic(). All priorentries in the table will be handled correctly.The arm64 ABI requires that struct fields of up to 8 bytes arenaturally-aligned, with padding added within a struct such that structare suitably aligned within arrays.When CONFIG_DEBUG_BUGVERPOSE=y, the layout of a bug_entry is:\tstruct bug_entry {\t\tsigned int      bug_addr_disp;\t// 4 bytes\t\tsigned int      file_disp;\t// 4 bytes\t\tunsigned short  line;\t\t// 2 bytes\t\tunsigned short  flags;\t\t// 2 bytes\t}... with 12 bytes total, requiring 4-byte alignment.When CONFIG_DEBUG_BUGVERBOSE=n, the layout of a bug_entry is:\tstruct bug_entry {\t\tsigned int      bug_addr_disp;\t// 4 bytes\t\tunsigned short  flags;\t\t// 2 bytes\t\t< implicit padding >\t\t// 2 bytes\t}... with 8 bytes total, with 6 bytes of data and 2 bytes of trailingpadding, requiring 4-byte alginment.When we create a bug_entry in assembly, we align the start of the entryto 4 bytes, which implicitly handles padding for any prior entries.However, we do not align the end of the entry, and so whenCONFIG_DEBUG_BUGVERBOSE=n, the final entry lacks the trailing paddingbytes.For the main kernel image this is not a problem as find_bug() doesn'tdepend on the trailing padding bytes when searching for entries:\tfor (bug = __start___bug_table; bug < __stop___bug_table; ++bug)\t\tif (bugaddr == bug_addr(bug))\t\t\treturn bug;However for modules, module_bug_finalize() depends on the trailingbytes when calculating the number of entries:\tmod->num_bugs = sechdrs[i].sh_size / sizeof(struct bug_entry);... and as the last bug_entry lacks the necessary padding bytes, this entrywill not be counted, e.g. in the case of a single entry:\tsechdrs[i].sh_size == 6\tsizeof(struct bug_entry) == 8;\tsechdrs[i].sh_size / sizeof(struct bug_entry) == 0;Consequently module_find_bug() will miss the last bug_entry when it does:\tfor (i = 0; i < mod->num_bugs; ++i, ++bug)\t\tif (bugaddr == bug_addr(bug))\t\t\tgoto out;... which can lead to a kenrel panic due to an unhandled bug.This can be demonstrated with the following module:\tstatic int __init buginit(void)\t{\t\tWARN(1, \"hello\\n\");\t\treturn 0;\t}\tstatic void __exit bugexit(void)\t{\t}\tmodule_init(buginit);\tmodule_exit(bugexit);\tMODULE_LICENSE(\"GPL\");... which will trigger a kernel panic when loaded:\t------------[ cut here ]------------\thello\tUnexpected kernel BRK exception at EL1\tInternal error: BRK handler: 00000000f2000800 [#1] PREEMPT SMP\tModules linked in: hello(O+)\tCPU: 0 PID: 50 Comm: insmod Tainted: G           O       6.9.1 #8\tHardware name: linux,dummy-virt (DT)\tpstate: 60400005 (nZCv daif +PAN -UAO -TCO -DIT -SSBS BTYPE=--)\tpc : buginit+0x18/0x1000 [hello]\tlr : buginit+0x18/0x1000 [hello]\tsp : ffff800080533ae0\tx29: ffff800080533ae0 x28: 0000000000000000 x27: 0000000000000000\tx26: ffffaba8c4e70510 x25: ffff800080533c30 x24: ffffaba8c4a28a58\tx23: 0000000000000000 x22: 0000000000000000 x21: ffff3947c0eab3c0\tx20: ffffaba8c4e3f000 x19: ffffaba846464000 x18: 0000000000000006\tx17: 0000000000000000 x16: ffffaba8c2492834 x15: 0720072007200720\tx14: 0720072007200720 x13: ffffaba8c49b27c8 x12: 0000000000000312\tx11: 0000000000000106 x10: ffffaba8c4a0a7c8 x9 : ffffaba8c49b27c8\tx8 : 00000000ffffefff x7 : ffffaba8c4a0a7c8 x6 : 80000000fffff000\tx5 : 0000000000000107 x4 : 0000000000000000 x3 : 0000000000000000\tx2 : 0000000000000000 x1 : 0000000000000000 x0 : ffff3947c0eab3c0\tCall trace:\t buginit+0x18/0x1000 [hello]\t do_one_initcall+0x80/0x1c8\t do_init_module+0x60/0x218\t load_module+0x1ba4/0x1d70\t __do_sys_init_module+0x198/0x1d0\t __arm64_sys_init_module+0x1c/0x28\t invoke_syscall+0x48/0x114\t el0_svc---truncated---",
		"affected": {
			"family": "unix",
			"platform": "Ubuntu 16.04 FIPS Compliant"
		},
		"reference": {
			"source": "CVE",
			"ref_id": "CVE-2024-39488",
			"ref_url": "https://www.cve.org/CVERecord?id=CVE-2024-39488"
		},
		"advisory": {
			"severity": "Medium",
			"rights": "Copyright (C) 2024 Canonical Ltd.",
			"public_date": "2024-07-10 08:15:00 UTC",
			"cve": {
				"text": "CVE-2024-39488",
				"href": "https://ubuntu.com/security/CVE-2024-39488",
				"public": "20240710"
			},
			"public_date_at_usn": "2024-07-10 08:15:00 UTC",
			"ref": [
				"https://ubuntu.com/security/notices/USN-6951-1",
				"https://ubuntu.com/security/notices/USN-6953-1",
				"https://ubuntu.com/security/notices/USN-6951-2",
				"https://ubuntu.com/security/notices/USN-6951-3",
				"https://ubuntu.com/security/notices/USN-6951-4",
				"https://ubuntu.com/security/notices/USN-6979-1",
				"https://ubuntu.com/security/notices/USN-6999-1",
				"https://ubuntu.com/security/notices/USN-7004-1",
				"https://ubuntu.com/security/notices/USN-7005-1",
				"https://ubuntu.com/security/notices/USN-7007-1",
				"https://ubuntu.com/security/notices/USN-7008-1",
				"https://ubuntu.com/security/notices/USN-7005-2",
				"https://ubuntu.com/security/notices/USN-7009-1",
				"https://ubuntu.com/security/notices/USN-7019-1"
			]
		}
	},
	"notes": {},
	"criteria": {
		"criterias": [
			{
				"operator": "OR",
				"criterions": [
					{
						"test_ref": "oval:com.ubuntu.xenial:tst:201245420000100",
						"comment": "linux-fips: while related to the CVE in some way, a decision has been made to ignore this issue (note: 'ESM criteria, was needed')."
					}
				]
			}
		]
	}
}
