{
	"class": "vulnerability",
	"id": "oval:com.ubuntu.xenial:def:2024449320000000",
	"version": "1",
	"metadata": {
		"title": "CVE-2024-44932 on Ubuntu 16.04 FIPS Compliant (xenial) - medium",
		"description": "In the Linux kernel, the following vulnerability has been resolved:idpf: fix UAFs when destroying the queuesThe second tagged commit started sometimes (very rarely, but possible)throwing WARNs fromnet/core/page_pool.c:page_pool_disable_direct_recycling().Turned out idpf frees interrupt vectors with embedded NAPIs *before*freeing the queues making page_pools' NAPI pointers lead to freedmemory before these pools are destroyed by libeth.It's not clear whether there are other accesses to the freed vectorswhen destroying the queues, but anyway, we usually free queue/interruptvectors only when the queues are destroyed and the NAPIs are guaranteedto not be referenced anywhere.Invert the allocation and freeing logic making queue/interrupt vectorsbe allocated first and freed last. Vectors don't require queues to bepresent, so this is safe. Additionally, this change allows to removethat useless queue->q_vector pointer cleanup, as vectors are stillvalid when freeing the queues (+ both are freed within one function,so it's not clear why nullify the pointers at all).",
		"affected": {
			"family": "unix",
			"platform": "Ubuntu 16.04 FIPS Compliant"
		},
		"reference": {
			"source": "CVE",
			"ref_id": "CVE-2024-44932",
			"ref_url": "https://www.cve.org/CVERecord?id=CVE-2024-44932"
		},
		"advisory": {
			"severity": "Medium",
			"rights": "Copyright (C) 2024 Canonical Ltd.",
			"public_date": "2024-08-27",
			"cve": {
				"text": "CVE-2024-44932",
				"href": "https://ubuntu.com/security/CVE-2024-44932",
				"public": "20240827"
			}
		}
	},
	"notes": {},
	"criteria": {
		"criterias": [
			{
				"operator": "OR",
				"criterions": [
					{
						"test_ref": "oval:com.ubuntu.xenial:tst:201585530000000",
						"comment": "linux-fips package in fips-updates/xenial is affected and may need fixing."
					}
				]
			}
		]
	}
}
