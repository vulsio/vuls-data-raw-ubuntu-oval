{
	"class": "vulnerability",
	"id": "oval:com.ubuntu.xenial:def:2023527590000000",
	"version": "1",
	"metadata": {
		"title": "CVE-2023-52759 on Ubuntu 16.04 FIPS Compliant (xenial) - medium",
		"description": "In the Linux kernel, the following vulnerability has been resolved:gfs2: ignore negated quota changesWhen lots of quota changes are made, there may be cases in which aninode's quota information is increased and then decreased, such as whenblocks are added to a file, then deleted from it. If the timing isright, function do_qc can add pending quota changes to a transaction,then later, another call to do_qc can negate those changes, resultingin a net gain of 0. The quota_change information is recorded in the qcbuffer (and qd element of the inode as well). The buffer is added to thetransaction by the first call to do_qc, but a subsequent call changesthe value from non-zero back to zero. At that point it's too late toremove the buffer_head from the transaction. Later, when the quota synccode is called, the zero-change qd element is discovered and flagged asan assert warning. If the fs is mounted with errors=panic, the kernelwill panic.This is usually seen when files are truncated and the quota changes arenegated by punch_hole/truncate which uses gfs2_quota_hold andgfs2_quota_unhold rather than block allocations that use gfs2_quota_lockand gfs2_quota_unlock which automatically do quota sync.This patch solves the problem by adding a check to qd_check_sync suchthat net-zero quota changes already added to the transaction are nolonger deemed necessary to be synced, and skipped.In this case references are taken for the qd and the slot from do_qcso those need to be put. The normal sequence of events for a normalnon-zero quota change is as follows:gfs2_quota_change   do_qc      qd_hold      slot_holdLater, when the changes are to be synced:gfs2_quota_sync   qd_fish      qd_check_sync         gets qd ref via lockref_get_not_dead   do_sync      do_qc(QC_SYNC)         qd_put\t    lockref_put_or_lock   qd_unlock      qd_put         lockref_put_or_lockIn the net-zero change case, we add a check to qd_check_sync so it putsthe qd and slot references acquired in gfs2_quota_change and skip theunneeded sync.",
		"affected": {
			"family": "unix",
			"platform": "Ubuntu 16.04 FIPS Compliant"
		},
		"reference": {
			"source": "CVE",
			"ref_id": "CVE-2023-52759",
			"ref_url": "https://www.cve.org/CVERecord?id=CVE-2023-52759"
		},
		"advisory": {
			"severity": "Medium",
			"rights": "Copyright (C) 2024 Canonical Ltd.",
			"public_date": "2024-05-21 16:15:00 UTC",
			"cve": {
				"text": "CVE-2023-52759",
				"href": "https://ubuntu.com/security/CVE-2023-52759",
				"public": "20240521"
			}
		}
	},
	"notes": {},
	"criteria": {
		"criterias": [
			{
				"operator": "OR",
				"criterions": [
					{
						"test_ref": "oval:com.ubuntu.xenial:tst:201585530000000",
						"comment": "linux-fips package in fips-updates/xenial is affected and may need fixing."
					}
				]
			}
		]
	}
}
