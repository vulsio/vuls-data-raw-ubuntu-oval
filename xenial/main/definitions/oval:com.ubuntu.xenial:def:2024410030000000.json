{
	"class": "vulnerability",
	"id": "oval:com.ubuntu.xenial:def:2024410030000000",
	"version": "1",
	"metadata": {
		"title": "CVE-2024-41003 on Ubuntu 16.04 LTS (xenial) - medium",
		"description": "In the Linux kernel, the following vulnerability has been resolved:bpf: Fix reg_set_min_max corruption of fake_regJuan reported that after doing some changes to buzzer [0] and implementinga new fuzzing strategy guided by coverage, they noticed the following inone of the probes:  [...]  13: (79) r6 = *(u64 *)(r0 +0)         ; R0=map_value(ks=4,vs=8)R6_w=scalar()  14: (b7) r0 = 0                       ; R0_w=0  15: (b4) w0 = -1                      ; R0_w=0xffffffff  16: (74) w0 >>= 1                     ; R0_w=0x7fffffff  17: (5c) w6 &= w0                     ; R0_w=0x7fffffffR6_w=scalar(smin=smin32=0,smax=umax=umax32=0x7fffffff,var_off=(0x0;0x7fffffff))  18: (44) w6 |= 2                      ;R6_w=scalar(smin=umin=smin32=umin32=2,smax=umax=umax32=0x7fffffff,var_off=(0x2;0x7ffffffd))  19: (56) if w6 != 0x7ffffffd goto pc+1  REG INVARIANTS VIOLATION (true_reg2): range bounds violationu64=[0x7fffffff, 0x7ffffffd] s64=[0x7fffffff, 0x7ffffffd] u32=[0x7fffffff,0x7ffffffd] s32=[0x7fffffff, 0x7ffffffd] var_off=(0x7fffffff, 0x0)  REG INVARIANTS VIOLATION (false_reg1): range bounds violationu64=[0x7fffffff, 0x7ffffffd] s64=[0x7fffffff, 0x7ffffffd] u32=[0x7fffffff,0x7ffffffd] s32=[0x7fffffff, 0x7ffffffd] var_off=(0x7fffffff, 0x0)  REG INVARIANTS VIOLATION (false_reg2): const tnum out of sync with rangebounds u64=[0x0, 0xffffffffffffffff] s64=[0x8000000000000000,0x7fffffffffffffff] u32=[0x0, 0xffffffff] s32=[0x80000000, 0x7fffffff]var_off=(0x7fffffff, 0x0)  19: R6_w=0x7fffffff  20: (95) exit  from 19 to 21: R0=0x7fffffffR6=scalar(smin=umin=smin32=umin32=2,smax=umax=smax32=umax32=0x7ffffffe,var_off=(0x2;0x7ffffffd)) R7=map_ptr(ks=4,vs=8) R9=ctx() R10=fp0fp-24=map_ptr(ks=4,vs=8) fp-40=mmmmmmmm  21: R0=0x7fffffffR6=scalar(smin=umin=smin32=umin32=2,smax=umax=smax32=umax32=0x7ffffffe,var_off=(0x2;0x7ffffffd)) R7=map_ptr(ks=4,vs=8) R9=ctx() R10=fp0fp-24=map_ptr(ks=4,vs=8) fp-40=mmmmmmmm  21: (14) w6 -= 2147483632             ;R6_w=scalar(smin=umin=umin32=2,smax=umax=0xffffffff,smin32=0x80000012,smax32=14,var_off=(0x2;0xfffffffd))  22: (76) if w6 s>= 0xe goto pc+1      ;R6_w=scalar(smin=umin=umin32=2,smax=umax=0xffffffff,smin32=0x80000012,smax32=13,var_off=(0x2;0xfffffffd))  23: (95) exit  from 22 to 24: R0=0x7fffffff R6_w=14 R7=map_ptr(ks=4,vs=8) R9=ctx()R10=fp0 fp-24=map_ptr(ks=4,vs=8) fp-40=mmmmmmmm  24: R0=0x7fffffff R6_w=14 R7=map_ptr(ks=4,vs=8) R9=ctx() R10=fp0fp-24=map_ptr(ks=4,vs=8) fp-40=mmmmmmmm  24: (14) w6 -= 14                     ; R6_w=0  [...]What can be seen here is a register invariant violation on line 19. Afterthe binary-or in line 18, the verifier knows that bit 2 is set but knowsnothing about the rest of the content which was loaded from a map value,meaning, range is [2,0x7fffffff] with var_off=(0x2; 0x7ffffffd). When inline 19 the verifier analyzes the branch, it splits the register statesin reg_set_min_max() into the registers of the true branch (true_reg1,true_reg2) and the registers of the false branch (false_reg1, false_reg2).Since the test is w6 != 0x7ffffffd, the src_reg is a known constant.Internally, the verifier creates a \"fake\" register initialized as scalarto the value of 0x7ffffffd, and then passes it onto reg_set_min_max(). Now,for line 19, it is mathematically impossible to take the false branch ofthis program, yet the verifier analyzes it. It is impossible because thesecond bit of r6 will be set due to the prior or operation and theconstant in the condition has that bit unset (hex(fd) == binary(1111 1101).When the verifier first analyzes the false / fall-through branch, it willcompute an intersection between the var_off of r6 and of the constant. Thisis because the verifier creates a \"fake\" register initialized to the valueof the constant. The intersection result later refines both registers inregs_refine_cond_op():  [...]  t = tnum_intersect(tnum_subreg(reg1->var_off),tnum_subreg(reg2->var_off));  reg1->var_o---truncated---\n\n    Update Instructions:\n\n    Run `sudo pro fix CVE-2024-41003` to fix the vulnerability. The problem can be corrected\n    by updating your system to the following package versions:\n\nlinux-image-4.4.0-211-generic - 4.4.0-2.16\nlinux-image-unsigned-4.4.0-211-generic - 4.4.0-2.16\nlinux-image-unsigned-4.4.0-211-lowlatency - 4.4.0-2.16\nAvailable with Ubuntu Pro (Infra-only): https://ubuntu.com/pro\n\nlinux-image-4.15.0-143-generic - 4.8.0-39.42~16.04.1\nlinux-image-unsigned-4.15.0-143-generic - 4.8.0-39.42~16.04.1\nlinux-image-unsigned-4.15.0-143-lowlatency - 4.8.0-39.42~16.04.1\nAvailable with Ubuntu Pro (Infra-only): https://ubuntu.com/pro\n\nlinux-image-4.4.0-1094-kvm - 4.4.0-1004.9\nAvailable with Ubuntu Pro (Infra-only): https://ubuntu.com/pro\n\nlinux-image-4.4.0-1129-aws - 4.4.0-1001.10\nAvailable with Ubuntu Pro (Infra-only): https://ubuntu.com/pro\n\nlinux-image-4.15.0-1102-aws - 4.15.0-1030.31~16.04.1\nAvailable with Ubuntu Pro (Infra-only): https://ubuntu.com/pro\n\nlinux-image-unsigned-4.15.0-1114-azure - 4.11.0-1009.9\nAvailable with Ubuntu Pro (Infra-only): https://ubuntu.com/pro\n\nlinux-image-unsigned-4.15.0-1099-gcp - 4.10.0-1004.4\nAvailable with Ubuntu Pro (Infra-only): https://ubuntu.com/pro\n\nlinux-image-unsigned-4.15.0-1071-oracle - 4.15.0-1007.9~16.04.1\nAvailable with Ubuntu Pro (Infra-only): https://ubuntu.com/pro",
		"affected": {
			"family": "unix",
			"platform": "Ubuntu 16.04 LTS"
		},
		"reference": {
			"source": "CVE",
			"ref_id": "CVE-2024-41003",
			"ref_url": "https://www.cve.org/CVERecord?id=CVE-2024-41003"
		},
		"advisory": {
			"severity": "Medium",
			"rights": "Copyright (C) 2024 Canonical Ltd.",
			"public_date": "2024-07-12 13:15:00 UTC",
			"cve": {
				"text": "CVE-2024-41003",
				"href": "https://ubuntu.com/security/CVE-2024-41003",
				"public": "20240712"
			},
			"public_date_at_usn": "2024-07-12 13:15:00 UTC",
			"ref": [
				"https://ubuntu.com/security/notices/USN-6999-1",
				"https://ubuntu.com/security/notices/USN-7004-1",
				"https://ubuntu.com/security/notices/USN-7005-1",
				"https://ubuntu.com/security/notices/USN-7008-1",
				"https://ubuntu.com/security/notices/USN-7005-2"
			]
		}
	},
	"notes": {},
	"criteria": {
		"criterias": [
			{
				"operator": "OR",
				"criterions": [
					{
						"test_ref": "oval:com.ubuntu.xenial:tst:201513390000000",
						"comment": "linux package in xenial, is related to the CVE in some way and has been fixed (note: '4.4.0-2.16')."
					},
					{
						"test_ref": "oval:com.ubuntu.xenial:tst:2016100880000040",
						"comment": "linux-hwe package in xenial, is related to the CVE in some way and has been fixed (note: '4.8.0-39.42~16.04.1')."
					},
					{
						"test_ref": "oval:com.ubuntu.xenial:tst:200636350000110",
						"comment": "linux-kvm package in xenial, is related to the CVE in some way and has been fixed (note: '4.4.0-1004.9')."
					},
					{
						"test_ref": "oval:com.ubuntu.xenial:tst:200636350000060",
						"comment": "linux-aws package in xenial, is related to the CVE in some way and has been fixed (note: '4.4.0-1001.10')."
					},
					{
						"test_ref": "oval:com.ubuntu.xenial:tst:200747740000010",
						"comment": "linux-aws-hwe package in xenial, is related to the CVE in some way and has been fixed (note: '4.15.0-1030.31~16.04.1')."
					},
					{
						"test_ref": "oval:com.ubuntu.xenial:tst:200636350000090",
						"comment": "linux-azure package in xenial, is related to the CVE in some way and has been fixed (note: '4.11.0-1009.9')."
					},
					{
						"test_ref": "oval:com.ubuntu.xenial:tst:200636350000100",
						"comment": "linux-gcp package in xenial, is related to the CVE in some way and has been fixed (note: '4.10.0-1004.4')."
					},
					{
						"test_ref": "oval:com.ubuntu.xenial:tst:200747740000020",
						"comment": "linux-oracle package in xenial, is related to the CVE in some way and has been fixed (note: '4.15.0-1007.9~16.04.1')."
					}
				]
			}
		]
	}
}
