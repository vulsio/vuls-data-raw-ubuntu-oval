{
	"class": "vulnerability",
	"id": "oval:com.ubuntu.xenial:def:2023528280000000",
	"version": "1",
	"metadata": {
		"title": "CVE-2023-52828 on Ubuntu 16.04 LTS (xenial) - medium",
		"description": "In the Linux kernel, the following vulnerability has been resolved: bpf:Detect IP == ksym.end as part of BPF program Now that bpf_throw kfunc isthe first such call instruction that has noreturn semantics within theverifier, this also kicks in dead code elimination in unprecedented ways.For one, any instruction following a bpf_throw call will never be marked asseen. Moreover, if a callchain ends up throwing, any instructions after thecall instruction to the eventually throwing subprog in callers will alsonever be marked as seen. The tempting way to fix this would be to emitextra 'int3' instructions which bump the jited_len of a program, and ensurethat during runtime when a program throws, we can discover its boundarieseven if the call instruction to bpf_throw (or to subprogs that alwaysthrow) is emitted as the final instruction in the program. An example ofsuch a program would be this: do_something(): ... r0 = 0 exit foo(): r1 = 0call bpf_throw r0 = 0 exit bar(cond): if r1 != 0 goto pc+2 calldo_something exit call foo r0 = 0 // Never seen by verifier exit //main(ctx): r1 = ... call bar r0 = 0 exit Here, if we do end up throwing,the stacktrace would be the following: bpf_throw foo bar main In bar, thefinal instruction emitted will be the call to foo, as such, the returnaddress will be the subsequent instruction (which the JIT emits as int3 onx86). This will end up lying outside the jited_len of the program, thus,when unwinding, we will fail to discover the return address as belonging toany program and end up in a panic due to the unreliable stack unwinding ofBPF programs that we never expect. To remedy this case, makebpf_prog_ksym_find treat IP == ksym.end as part of the BPF program, so thatis_bpf_text_address returns true when such a case occurs, and we are ableto unwind reliably when the final instruction ends up being a callinstruction.",
		"affected": {
			"family": "unix",
			"platform": "Ubuntu 16.04 LTS"
		},
		"reference": {
			"source": "CVE",
			"ref_id": "CVE-2023-52828",
			"ref_url": "https://www.cve.org/CVERecord?id=CVE-2023-52828"
		},
		"advisory": {
			"severity": "Medium",
			"rights": "Copyright (C) 2024 Canonical Ltd.",
			"public_date": "2024-05-21 16:15:00 UTC",
			"cve": {
				"text": "CVE-2023-52828",
				"href": "https://ubuntu.com/security/CVE-2023-52828",
				"public": "20240521"
			}
		}
	},
	"notes": {},
	"criteria": {
		"criterias": [
			{
				"operator": "OR",
				"criterions": [
					{
						"test_ref": "oval:com.ubuntu.xenial:tst:201245420000000",
						"comment": "linux package in xenial is affected and may need fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.xenial:tst:201245420000040",
						"comment": "linux-hwe package in xenial is affected and may need fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.xenial:tst:201245420000070",
						"comment": "linux-kvm package in xenial is affected and may need fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.xenial:tst:201245420000030",
						"comment": "linux-aws package in xenial is affected and may need fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.xenial:tst:201245420000080",
						"comment": "linux-aws-hwe package in xenial is affected and may need fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.xenial:tst:201245420000050",
						"comment": "linux-azure package in xenial is affected and may need fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.xenial:tst:201245420000060",
						"comment": "linux-gcp package in xenial is affected and may need fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.xenial:tst:201245420000090",
						"comment": "linux-oracle package in xenial is affected and may need fixing."
					}
				]
			}
		]
	}
}
