{
	"class": "vulnerability",
	"id": "oval:com.ubuntu.xenial:def:2024536800000000",
	"version": "1",
	"metadata": {
		"title": "CVE-2024-53680 on Ubuntu Pro FIPS 16.04 LTS (xenial) - medium",
		"description": "In the Linux kernel, the following vulnerability has been resolved:ipvs: fix UB due to uninitialized stack access in ip_vs_protocol_init()Under certain kernel configurations when building with Clang/LLVM, thecompiler does not generate a return or jump as the terminatorinstruction for ip_vs_protocol_init(), triggering the following objtoolwarning during build time:  vmlinux.o: warning: objtool: ip_vs_protocol_init() falls through to nextfunction __initstub__kmod_ip_vs_rr__935_123_ip_vs_rr_init6()At runtime, this either causes an oops when trying to load the ipvsmodule or a boot-time panic if ipvs is built-in. This same issue hasbeen reported by the Intel kernel test robot previously.Digging deeper into both LLVM and the kernel code reveals this to be aundefined behavior problem. ip_vs_protocol_init() uses a on-stack bufferof 64 chars to store the registered protocol names and leaves ituninitialized after definition. The function calls strnlen() whenconcatenating protocol names into the buffer. With CONFIG_FORTIFY_SOURCEstrnlen() performs an extra step to check whether the last byte of theinput char buffer is a null character (commit 3009f891bb9f (\"fortify:Allow strlen() and strnlen() to pass compile-time known lengths\")).This, together with possibly other configurations, cause the followingIR to be generated:  define hidden i32 @ip_vs_protocol_init() local_unnamed_addr #5 section\".init.text\" align 16 !kcfi_type !29 {    %1 = alloca [64 x i8], align 16    ...  14:                                               ; preds = %11    %15 = getelementptr inbounds i8, ptr %1, i64 63    %16 = load i8, ptr %15, align 1    %17 = tail call i1 @llvm.is.constant.i8(i8 %16)    %18 = icmp eq i8 %16, 0    %19 = select i1 %17, i1 %18, i1 false    br i1 %19, label %20, label %23  20:                                               ; preds = %14    %21 = call i64 @strlen(ptr noundef nonnull dereferenceable(1) %1) #23    ...  23:                                               ; preds = %14, %11, %20    %24 = call i64 @strnlen(ptr noundef nonnull dereferenceable(1) %1, i64noundef 64) #24    ...  }The above code calculates the address of the last char in the buffer(value %15) and then loads from it (value %16). Because the buffer isnever initialized, the LLVM GVN pass marks value %16 as undefined:  %13 = getelementptr inbounds i8, ptr %1, i64 63  br i1 undef, label %14, label %17This gives later passes (SCCP, in particular) more DCE opportunities bypropagating the undef value further, and eventually removes everythingafter the load on the uninitialized stack location:  define hidden i32 @ip_vs_protocol_init() local_unnamed_addr #0 section\".init.text\" align 16 !kcfi_type !11 {    %1 = alloca [64 x i8], align 16    ...  12:                                               ; preds = %11    %13 = getelementptr inbounds i8, ptr %1, i64 63    unreachable  }In this way, the generated native code will just fall through to thenext function, as LLVM does not generate any code for the unreachable IRinstruction and leaves the function without a terminator.Zero the on-stack buffer to avoid this possible UB.",
		"affected": {
			"family": "unix",
			"platform": "Ubuntu Pro FIPS 16.04 LTS"
		},
		"reference": {
			"source": "CVE",
			"ref_id": "CVE-2024-53680",
			"ref_url": "https://www.cve.org/CVERecord?id=CVE-2024-53680"
		},
		"advisory": {
			"severity": "Medium",
			"rights": "Copyright (C) 2025 Canonical Ltd.",
			"public_date": "2025-01-11 13:15:00 UTC",
			"cve": {
				"text": "CVE-2024-53680",
				"href": "https://ubuntu.com/security/CVE-2024-53680",
				"public": "20250111"
			}
		}
	},
	"notes": {},
	"criteria": {
		"criterias": [
			{
				"operator": "OR",
				"criterions": [
					{
						"test_ref": "oval:com.ubuntu.xenial:tst:201245420000000",
						"comment": "linux package in xenial is affected and may need fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.xenial:tst:201245420000040",
						"comment": "linux-hwe package in xenial is affected and may need fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.xenial:tst:201245420000070",
						"comment": "linux-kvm package in xenial is affected and may need fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.xenial:tst:201245420000030",
						"comment": "linux-aws package in xenial is affected and may need fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.xenial:tst:201245420000080",
						"comment": "linux-aws-hwe package in xenial is affected and may need fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.xenial:tst:201245420000050",
						"comment": "linux-azure package in xenial is affected and may need fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.xenial:tst:201245420000100",
						"comment": "linux-fips package in fips/xenial is affected and may need fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.xenial:tst:201245420000060",
						"comment": "linux-gcp package in xenial is affected and may need fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.xenial:tst:201245420000090",
						"comment": "linux-oracle package in xenial is affected and may need fixing."
					}
				]
			}
		]
	}
}
