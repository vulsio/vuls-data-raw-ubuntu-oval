{
	"class": "vulnerability",
	"id": "oval:com.ubuntu.xenial:def:2024502000000000",
	"version": "1",
	"metadata": {
		"title": "CVE-2024-50200 on Ubuntu Pro FIPS 16.04 LTS (xenial) - medium",
		"description": "In the Linux kernel, the following vulnerability has been resolved:maple_tree: correct tree corruption on spanning storePatch series \"maple_tree: correct tree corruption on spanning store\", v3.There has been a nasty yet subtle maple tree corruption bug that appearsto have been in existence since the inception of the algorithm.This bug seems far more likely to happen since commit f8d112a4e657(\"mm/mmap: avoid zeroing vma tree in mmap_region()\"), which is the pointat which reports started to be submitted concerning this bug.We were made definitely aware of the bug thanks to the kind efforts ofBert Karwatzki who helped enormously in my being able to track this downand identify the cause of it.The bug arises when an attempt is made to perform a spanning store acrosstwo leaf nodes, where the right leaf node is the rightmost child of theshared parent, AND the store completely consumes the right-mode node.This results in mas_wr_spanning_store() mitakenly duplicating the new andexisting entries at the maximum pivot within the range, and thus mapletree corruption.The fix patch corrects this by detecting this scenario and disallowing themistaken duplicate copy.The fix patch commit message goes into great detail as to how this occurs.This series also includes a test which reliably reproduces the issue, andasserts that the fix works correctly.Bert has kindly tested the fix and confirmed it resolved his issues.  AlsoMikhail Gavrilov kindly reported what appears to be precisely the samebug, which this fix should also resolve.This patch (of 2):There has been a subtle bug present in the maple tree implementation fromits inception.This arises from how stores are performed - when a store occurs, it willoverwrite overlapping ranges and adjust the tree as necessary toaccommodate this.A range may always ultimately span two leaf nodes.  In this instance wewalk the two leaf nodes, determine which elements are not overwritten tothe left and to the right of the start and end of the ranges respectivelyand then rebalance the tree to contain these entries and the newlyinserted one.This kind of store is dubbed a 'spanning store' and is implemented bymas_wr_spanning_store().In order to reach this stage, mas_store_gfp() invokesmas_wr_preallocate(), mas_wr_store_type() and mas_wr_walk() in turn towalk the tree and update the object (mas) to traverse to the locationwhere the write should be performed, determining its store type.When a spanning store is required, this function returns false stopping atthe parent node which contains the target range, and mas_wr_store_type()marks the mas->store_type as wr_spanning_store to denote this fact.When we go to perform the store in mas_wr_spanning_store(), we firstdetermine the elements AFTER the END of the range we wish to store (thatis, to the right of the entry to be inserted) - we do this by walking tothe NEXT pivot in the tree (i.e.  r_mas.last + 1), starting at the node wehave just determined contains the range over which we intend to write.We then turn our attention to the entries to the left of the entry we areinserting, whose state is represented by l_mas, and copy these into a 'bignode', which is a special node which contains enough slots to contain twoleaf node's worth of data.We then copy the entry we wish to store immediately after this - the copyand the insertion of the new entry is performed by mas_store_b_node().After this we copy the elements to the right of the end of the range whichwe are inserting, if we have not exceeded the length of the node (i.e.r_mas.offset <= r_mas.end).Herein lies the bug - under very specific circumstances, this logic canbreak and corrupt the maple tree.Consider the following tree:Height  0                             Root Node                                 /      \\                 pivot = 0xffff /        \\ pivot = ULONG_MAX                               /---truncated---",
		"affected": {
			"family": "unix",
			"platform": "Ubuntu Pro FIPS 16.04 LTS"
		},
		"reference": {
			"source": "CVE",
			"ref_id": "CVE-2024-50200",
			"ref_url": "https://www.cve.org/CVERecord?id=CVE-2024-50200"
		},
		"advisory": {
			"severity": "Medium",
			"rights": "Copyright (C) 2024 Canonical Ltd.",
			"public_date": "2024-11-11",
			"cve": {
				"text": "CVE-2024-50200",
				"href": "https://ubuntu.com/security/CVE-2024-50200",
				"public": "20241111"
			}
		}
	},
	"notes": {},
	"criteria": {
		"criterias": [
			{
				"operator": "OR",
				"criterions": [
					{
						"test_ref": "oval:com.ubuntu.xenial:tst:201245420000000",
						"comment": "linux package in xenial is affected and may need fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.xenial:tst:201245420000040",
						"comment": "linux-hwe package in xenial is affected and may need fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.xenial:tst:201245420000070",
						"comment": "linux-kvm package in xenial is affected and may need fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.xenial:tst:201245420000030",
						"comment": "linux-aws package in xenial is affected and may need fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.xenial:tst:201245420000080",
						"comment": "linux-aws-hwe package in xenial is affected and may need fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.xenial:tst:201245420000050",
						"comment": "linux-azure package in xenial is affected and may need fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.xenial:tst:201245420000100",
						"comment": "linux-fips package in fips/xenial is affected and may need fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.xenial:tst:201245420000060",
						"comment": "linux-gcp package in xenial is affected and may need fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.xenial:tst:201245420000090",
						"comment": "linux-oracle package in xenial is affected and may need fixing."
					}
				]
			}
		]
	}
}
