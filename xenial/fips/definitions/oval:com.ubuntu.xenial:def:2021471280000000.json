{
	"class": "vulnerability",
	"id": "oval:com.ubuntu.xenial:def:2021471280000000",
	"version": "1",
	"metadata": {
		"title": "CVE-2021-47128 on Ubuntu Pro FIPS 16.04 LTS (xenial) - medium",
		"description": "In the Linux kernel, the following vulnerability has been resolved: bpf,lockdown, audit: Fix buggy SELinux lockdown permission checks Commit59438b46471a (\"security,lockdown,selinux: implement SELinux lockdown\")added an implementation of the locked_down LSM hook to SELinux, with theaim to restrict which domains are allowed to perform operations that wouldbreach lockdown. This is indirectly also getting audit subsystem involvedto report events. The latter is problematic, as reported by Ondrej andSerhei, since it can bring down the whole system via audit: 1) The auditevents that are triggered due to calls to security_locked_down() can OOMkill a machine, see below details [0]. 2) It also seems to be causing adeadlock via avc_has_perm()/slow_avc_audit() when trying to wake upkauditd, for example, when using trace_sched_switch() tracepoint, seedetails in [1]. Triggering this was not via some hypothetical corner case,but with existing tools like runqlat & runqslower from bcc, for example,which make use of this tracepoint. Rough call sequence goes like:rq_lock(rq) -> -------------------------+ trace_sched_switch() -> |bpf_prog_xyz() -> +-> deadlock selinux_lockdown() -> | audit_log_end() -> |wake_up_interruptible() -> | try_to_wake_up() -> | rq_lock(rq)--------------+ What's worse is that the intention of 59438b46471a tofurther restrict lockdown settings for specific applications in respect tothe global lockdown policy is completely broken for BPF. The SELinux policyrule for the current lockdown check looks something like this: allow <who><who> : lockdown { <reason> }; However, this doesn't match with the'current' task where the security_locked_down() is executed, example: httpddoes a syscall. There is a tracing program attached to the syscall whichtriggers a BPF program to run, which ends up doing abpf_probe_read_kernel{,_str}() helper call. The selinux_lockdown() hookdoes the permission check against 'current', that is, httpd in thisexample. httpd has literally zero relation to this tracing program, and itwould be nonsensical having to write an SELinux policy rule against httpdto let the tracing helper pass. The policy in this case needs to be againstthe entity that is installing the BPF program. For example, if bpftracewould generate a histogram of syscall counts by user space application:bpftrace -e 'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'bpftrace would then go and generate a BPF program from this internally. Oneway of doing it [for the sake of the example] could be to callbpf_get_current_task() helper and then access current->comm via one ofbpf_probe_read_kernel{,_str}() helpers. So the program itself has nothingto do with httpd or any other random app doing a syscall here. The BPFprogram _explicitly initiated_ the lockdown check. The allow/deny policybelongs in the context of bpftrace: meaning, you want to grant bpftraceaccess to use these helpers, but other tracers on the system likemy_random_tracer _not_. Therefore fix all three issues at the same time bytaking a completely different approach for the security_locked_down() hook,that is, move the check into the program verification phase where weactually retrieve the BPF func proto. This also reliably gets the task(current) that is trying to install the BPF tracing program, e.g.bpftrace/bcc/perf/systemtap/etc, and it also fixes the OOM since we'removing this out of the BPF helper's fast-path which can be called severalmillions of times per second. The check is then also in line with othersecurity_locked_down() hooks in the system where the enforcement isperformed at open/load time, for example, open_kcore() for /proc/kcoreaccess or module_sig_check() for module signatures just to pick f---truncated---\n\n    Update Instructions:\n\n    Run `sudo pro fix CVE-2021-47128` to fix the vulnerability. The problem can be corrected\n    by updating your system to the following package versions:\n\nlinux-image-4.4.0-211-generic - 4.4.0-2.16\nlinux-image-unsigned-4.4.0-211-generic - 4.4.0-2.16\nlinux-image-unsigned-4.4.0-211-lowlatency - 4.4.0-2.16\nAvailable with Ubuntu Pro (Infra-only): https://ubuntu.com/pro\n\nlinux-image-4.15.0-143-generic - 4.8.0-39.42~16.04.1\nlinux-image-unsigned-4.15.0-143-generic - 4.8.0-39.42~16.04.1\nlinux-image-unsigned-4.15.0-143-lowlatency - 4.8.0-39.42~16.04.1\nAvailable with Ubuntu Pro (Infra-only): https://ubuntu.com/pro\n\nlinux-image-4.4.0-1094-kvm - 4.4.0-1004.9\nAvailable with Ubuntu Pro (Infra-only): https://ubuntu.com/pro\n\nlinux-image-4.4.0-1129-aws - 4.4.0-1001.10\nAvailable with Ubuntu Pro (Infra-only): https://ubuntu.com/pro\n\nlinux-image-4.15.0-1102-aws - 4.15.0-1030.31~16.04.1\nAvailable with Ubuntu Pro (Infra-only): https://ubuntu.com/pro\n\nlinux-image-unsigned-4.15.0-1114-azure - 4.11.0-1009.9\nAvailable with Ubuntu Pro (Infra-only): https://ubuntu.com/pro\n\nlinux-image-4.4.0-1001-fips - 4.4.0-1001.1\nlinux-image-extra-4.4.0-1001-fips - 4.4.0-1001.1\nlinux-image-hmac-4.4.0-1001-fips - 4.4.0-1001.1\nAvailable with Ubuntu Pro: https://ubuntu.com/pro\n\nlinux-image-unsigned-4.15.0-1099-gcp - 4.10.0-1004.4\nAvailable with Ubuntu Pro (Infra-only): https://ubuntu.com/pro\n\nlinux-image-unsigned-4.15.0-1071-oracle - 4.15.0-1007.9~16.04.1\nAvailable with Ubuntu Pro (Infra-only): https://ubuntu.com/pro",
		"affected": {
			"family": "unix",
			"platform": "Ubuntu Pro FIPS 16.04 LTS"
		},
		"reference": {
			"source": "CVE",
			"ref_id": "CVE-2021-47128",
			"ref_url": "https://www.cve.org/CVERecord?id=CVE-2021-47128"
		},
		"advisory": {
			"severity": "Medium",
			"rights": "Copyright (C) 2024 Canonical Ltd.",
			"public_date": "2024-03-15 21:15:00 UTC",
			"cve": {
				"text": "CVE-2021-47128",
				"href": "https://ubuntu.com/security/CVE-2021-47128",
				"public": "20240315"
			}
		}
	},
	"notes": {},
	"criteria": {
		"criterias": [
			{
				"operator": "OR",
				"criterions": [
					{
						"test_ref": "oval:com.ubuntu.xenial:tst:201513390000000",
						"comment": "linux package in xenial, is related to the CVE in some way and has been fixed (note: '4.4.0-2.16')."
					},
					{
						"test_ref": "oval:com.ubuntu.xenial:tst:2016100880000040",
						"comment": "linux-hwe package in xenial, is related to the CVE in some way and has been fixed (note: '4.8.0-39.42~16.04.1')."
					},
					{
						"test_ref": "oval:com.ubuntu.xenial:tst:200636350000110",
						"comment": "linux-kvm package in xenial, is related to the CVE in some way and has been fixed (note: '4.4.0-1004.9')."
					},
					{
						"test_ref": "oval:com.ubuntu.xenial:tst:200636350000060",
						"comment": "linux-aws package in xenial, is related to the CVE in some way and has been fixed (note: '4.4.0-1001.10')."
					},
					{
						"test_ref": "oval:com.ubuntu.xenial:tst:200747740000010",
						"comment": "linux-aws-hwe package in xenial, is related to the CVE in some way and has been fixed (note: '4.15.0-1030.31~16.04.1')."
					},
					{
						"test_ref": "oval:com.ubuntu.xenial:tst:200636350000090",
						"comment": "linux-azure package in xenial, is related to the CVE in some way and has been fixed (note: '4.11.0-1009.9')."
					},
					{
						"test_ref": "oval:com.ubuntu.xenial:tst:2016200220000010",
						"comment": "linux-fips package in fips/xenial, is related to the CVE in some way and has been fixed (note: '4.4.0-1001.1')."
					},
					{
						"test_ref": "oval:com.ubuntu.xenial:tst:200636350000100",
						"comment": "linux-gcp package in xenial, is related to the CVE in some way and has been fixed (note: '4.10.0-1004.4')."
					},
					{
						"test_ref": "oval:com.ubuntu.xenial:tst:200747740000020",
						"comment": "linux-oracle package in xenial, is related to the CVE in some way and has been fixed (note: '4.15.0-1007.9~16.04.1')."
					}
				]
			}
		]
	}
}
