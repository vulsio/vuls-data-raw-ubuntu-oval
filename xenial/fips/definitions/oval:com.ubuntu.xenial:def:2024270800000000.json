{
	"class": "vulnerability",
	"id": "oval:com.ubuntu.xenial:def:2024270800000000",
	"version": "1",
	"metadata": {
		"title": "CVE-2024-27080 on Ubuntu 16.04 FIPS Certified (xenial) - medium",
		"description": "In the Linux kernel, the following vulnerability has been resolved: btrfs:fix race when detecting delalloc ranges during fiemap For fiemap werecently stopped locking the target extent range for the whole duration ofthe fiemap call, in order to avoid a deadlock in a scenario where thefiemap buffer happens to be a memory mapped range of the same file. Thisuse case is very unlikely to be useful in practice but it may be triggeredby fuzz testing (syzbot, etc). This however introduced a race that makes usmiss delalloc ranges for file regions that are currently holes, so thecaller of fiemap will not be aware that there's data for some file regions.This can be quite serious for some use cases - for example in coreutilsversions before 9.0, the cp program used fiemap to detect holes and data inthe source file, copying only regions with data (extents or delalloc) fromthe source file to the destination file in order to preserve holes (see thedocumentation for its --sparse command line option). This means that if cpwas used with a source file that had delalloc in a hole, the destinationfile could end up without that data, which is effectively a data lossissue, if it happened to hit the race described below. The race happenslike this: 1) Fiemap is called, without the FIEMAP_FLAG_SYNC flag, for afile that has delalloc in the file range [64M, 65M[, which is currently ahole; 2) Fiemap locks the inode in shared mode, then starts iterating theinode's subvolume tree searching for file extent items, without having thewhole fiemap target range locked in the inode's io tree - the changeintroduced recently by commit b0ad381fa769 (\"btrfs: fix deadlock withfiemap and extent locking\"). It only locks ranges in the io tree when itfinds a hole or prealloc extent since that commit; 3) Note that fiemapclones each leaf before using it, and this is to avoid deadlocks whenlocking a file range in the inode's io tree and the fiemap buffer is memorymapped to some file, because writing to the page with btrfs_page_mkwrite()will wait on any ordered extent for the page's range and the ordered extentneeds to lock the range and may need to modify the same leaf, thereforeleading to a deadlock on the leaf; 4) While iterating the file extent itemsin the cloned leaf before finding the hole in the range [64M, 65M[, thedelalloc in that range is flushed and its ordered extent completes -meaning the corresponding file extent item is in the inode's subvolumetree, but not present in the cloned leaf that fiemap is iterating over; 5)When fiemap finds the hole in the [64M, 65M[ range by seeing the gap in thecloned leaf (or a file extent item with disk_bytenr == 0 in case theNO_HOLES feature is not enabled), it will lock that file range in theinode's io tree and then search for delalloc by checking for theEXTENT_DELALLOC bit in the io tree for that range and ordered extents (withbtrfs_find_delalloc_in_range()). But it finds nothing since the delalloc inthat range was already flushed and the ordered extent completed and is gone- as a result fiemap will not report that there's delalloc or an extent forthe range [64M, 65M[, so user space will be mislead into thinking thatthere's a hole in that range. This could actually be sporadically triggeredwith test case generic/094 from fstests, which reports a missingextent/delalloc range like this: generic/094 2s ... - output mismatch (see/home/fdmanana/git/hub/xfstests/results//generic/094.out.bad) ---tests/generic/094.out 2020-06-10 19:29:03.830519425 +0100 +++/home/fdmanana/git/hub/xfstests/results//generic/094.out.bad 2024-02-2811:00:00.381071525 +0000 @@ -1,3 +1,9 @@ QA output created by 094 fiemaprun with sync fiemap run without sync +ERROR: couldn't find extent at 7+map is 'HHDDHPPDPHPH' +logical: [ 5.. 6] phys: ---truncated---",
		"affected": {
			"family": "unix",
			"platform": "Ubuntu 16.04 FIPS Certified"
		},
		"reference": {
			"source": "CVE",
			"ref_id": "CVE-2024-27080",
			"ref_url": "https://www.cve.org/CVERecord?id=CVE-2024-27080"
		},
		"advisory": {
			"severity": "Medium",
			"rights": "Copyright (C) 2024 Canonical Ltd.",
			"public_date": "2024-05-01 13:15:00 UTC",
			"cve": {
				"text": "CVE-2024-27080",
				"href": "https://ubuntu.com/security/CVE-2024-27080",
				"public": "20240501"
			},
			"public_date_at_usn": "2024-05-01 13:15:00 UTC",
			"ref": [
				"https://ubuntu.com/security/notices/USN-6816-1",
				"https://ubuntu.com/security/notices/USN-6817-1",
				"https://ubuntu.com/security/notices/USN-6817-2",
				"https://ubuntu.com/security/notices/USN-6817-3"
			]
		}
	},
	"notes": {},
	"criteria": {
		"criterias": [
			{
				"operator": "OR",
				"criterions": [
					{
						"test_ref": "oval:com.ubuntu.xenial:tst:201585530000000",
						"comment": "linux-fips package in fips/xenial is affected and may need fixing."
					}
				]
			}
		]
	}
}
