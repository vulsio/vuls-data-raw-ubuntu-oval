{
	"class": "vulnerability",
	"id": "oval:com.ubuntu.xenial:def:2021473910000000",
	"version": "1",
	"metadata": {
		"title": "CVE-2021-47391 on Ubuntu 16.04 FIPS Certified (xenial) - medium",
		"description": "In the Linux kernel, the following vulnerability has been resolved:RDMA/cma: Ensure rdma_addr_cancel() happens before issuing more requestsThe FSM can run in a circle allowing rdma_resolve_ip() to be called twiceon the same id_priv. While this cannot happen without going through thework, it violates the invariant that the same address resolutionbackground request cannot be active twice.       CPU 1                                  CPU 2rdma_resolve_addr():  RDMA_CM_IDLE -> RDMA_CM_ADDR_QUERY  rdma_resolve_ip(addr_handler)  #1\t\t\t process_one_req(): for #1                          addr_handler():                            RDMA_CM_ADDR_QUERY -> RDMA_CM_ADDR_BOUND                            mutex_unlock(&id_priv->handler_mutex);                            [.. handler still running ..]rdma_resolve_addr():  RDMA_CM_ADDR_BOUND -> RDMA_CM_ADDR_QUERY  rdma_resolve_ip(addr_handler)    !! two requests are now on the req_listrdma_destroy_id(): destroy_id_handler_unlock():  _destroy_id():   cma_cancel_operation():    rdma_addr_cancel()                          // process_one_req() self removes it\t\t          spin_lock_bh(&lock);                           cancel_delayed_work(&req->work);\t                   if (!list_empty(&req->list)) == true      ! rdma_addr_cancel() returns after process_on_req #1 is done   kfree(id_priv)\t\t\t process_one_req(): for #2                          addr_handler():\t                    mutex_lock(&id_priv->handler_mutex);                            !! Use after free on id_privrdma_addr_cancel() expects there to be one req on the list and onlycancels the first one. The self-removal behavior of the work only happensafter the handler has returned. This yields a situations where thereq_list can have two reqs for the same \"handle\" but rdma_addr_cancel()only cancels the first one.The second req remains active beyond rdma_destroy_id() and willuse-after-free id_priv once it inevitably triggers.Fix this by remembering if the id_priv has called rdma_resolve_ip() andalways cancel before calling it again. This ensures the req_list nevergets more than one item in it and doesn't cost anything in the normal flowthat never uses this strange error path.",
		"affected": {
			"family": "unix",
			"platform": "Ubuntu 16.04 FIPS Certified"
		},
		"reference": {
			"source": "CVE",
			"ref_id": "CVE-2021-47391",
			"ref_url": "https://www.cve.org/CVERecord?id=CVE-2021-47391"
		},
		"advisory": {
			"severity": "Medium",
			"rights": "Copyright (C) 2024 Canonical Ltd.",
			"public_date": "2024-05-21 15:15:00 UTC",
			"cve": {
				"text": "CVE-2021-47391",
				"href": "https://ubuntu.com/security/CVE-2021-47391",
				"public": "20240521"
			}
		}
	},
	"notes": {},
	"criteria": {
		"criterias": [
			{
				"operator": "OR",
				"criterions": [
					{
						"test_ref": "oval:com.ubuntu.xenial:tst:201585530000000",
						"comment": "linux-fips package in fips/xenial is affected and may need fixing."
					}
				]
			}
		]
	}
}
