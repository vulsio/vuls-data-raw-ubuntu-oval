{
	"class": "vulnerability",
	"id": "oval:com.ubuntu.oracular:def:2024530790000000",
	"version": "1",
	"metadata": {
		"title": "CVE-2024-53079 on Ubuntu 24.10 (oracular) - medium",
		"description": "In the Linux kernel, the following vulnerability has been resolved:mm/thp: fix deferred split unqueue naming and lockingRecent changes are putting more pressure on THP deferred split queues:under load revealing long-standing races, causing list_del corruptions,\"Bad page state\"s and worse (I keep BUGs in both of those, so usuallydon't get to see how badly they end up without).  The relevant recentchanges being 6.8's mTHP, 6.10's mTHP swapout, and 6.12's mTHP swapin,improved swap allocation, and underused THP splitting.Before fixing locking: rename misleading folio_undo_large_rmappable(),which does not undo large_rmappable, to folio_unqueue_deferred_split(),which is what it does.  But that and its out-of-line __callee are mminternals of very limited usability: add comment and WARN_ON_ONCEs tocheck usage; and return a bool to say if a deferred split was unqueued,which can then be used in WARN_ON_ONCEs around safety checks (sparingcallers the arcane conditionals in __folio_unqueue_deferred_split()).Just omit the folio_unqueue_deferred_split() from free_unref_folios(), allof whose callers now call it beforehand (and if any forget then bad_page()will tell) - except for its caller put_pages_list(), which itself nolonger has any callers (and will be deleted separately).Swapout: mem_cgroup_swapout() has been resetting folio->memcg_data 0without checking and unqueueing a THP folio from deferred split list;which is unfortunate, since the split_queue_lock depends on the memcg(when memcg is enabled); so swapout has been unqueueing such THPs later,when freeing the folio, using the pgdat's lock instead: potentiallycorrupting the memcg's list.  __remove_mapping() has frozen refcount to 0here, so no problem with calling folio_unqueue_deferred_split() beforeresetting memcg_data.That goes back to 5.4 commit 87eaceb3faa5 (\"mm: thp: make deferred splitshrinker memcg aware\"): which included a check on swapcache before addingto deferred queue, but no check on deferred queue before adding THP toswapcache.  That worked fine with the usual sequence of events in reclaim(though there were a couple of rare ways in which a THP on deferred queuecould have been swapped out), but 6.12 commit dafff3f4c850 (\"mm: splitunderused THPs\") avoids splitting underused THPs in reclaim, which makesswapcache THPs on deferred queue commonplace.Keep the check on swapcache before adding to deferred queue?  Yes: it isno longer essential, but preserves the existing behaviour, and is likelyto be a worthwhile optimization (vmstat showed much more traffic on thequeue under swapping load if the check was removed); update its comment.Memcg-v1 move (deprecated): mem_cgroup_move_account() has been changingfolio->memcg_data without checking and unqueueing a THP folio from thedeferred list, sometimes corrupting \"from\" memcg's list, like swapout.Refcount is non-zero here, so folio_unqueue_deferred_split() can only beused in a WARN_ON_ONCE to validate the fix, which must be done earlier:mem_cgroup_move_charge_pte_range() first try to split the THP (splittingof course unqueues), or skip it if that fails.  Not ideal, but movingcharge has been requested, and khugepaged should repair the THP later:nobody wants new custom unqueueing code just for this deprecated case.The 87eaceb3faa5 commit did have the code to move from one deferred listto another (but was not conscious of its unsafety while refcount non-0);but that was removed by 5.6 commit fac0516b5534 (\"mm: thp: don't need caredeferred split queue in memcg charge move path\"), which argued that theexistence of a PMD mapping guarantees that the THP cannot be on a deferredlist.  As above, false in rare cases, and now commonly false.Backport to 6.11 should be straightforward.  Earlier backports must takecare that other _deferred_list fixes and dependencies are included.  Thereis not a strong case for backports, but they can fix cornercases.",
		"affected": {
			"family": "unix",
			"platform": "Ubuntu 24.10"
		},
		"reference": {
			"source": "CVE",
			"ref_id": "CVE-2024-53079",
			"ref_url": "https://www.cve.org/CVERecord?id=CVE-2024-53079"
		},
		"advisory": {
			"severity": "Medium",
			"rights": "Copyright (C) 2024 Canonical Ltd.",
			"public_date": "2024-11-19 18:15:00 UTC",
			"cve": {
				"text": "CVE-2024-53079",
				"href": "https://ubuntu.com/security/CVE-2024-53079",
				"public": "20241119"
			}
		}
	},
	"notes": {},
	"criteria": {
		"criterias": [
			{
				"operator": "OR",
				"criterions": [
					{
						"test_ref": "oval:com.ubuntu.oracular:tst:201245420000000",
						"comment": "linux package in oracular is affected and needs fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.oracular:tst:201245420000010",
						"comment": "linux-aws package in oracular is affected and needs fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.oracular:tst:201245420000020",
						"comment": "linux-azure package in oracular is affected and needs fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.oracular:tst:201245420000030",
						"comment": "linux-gcp package in oracular is affected and needs fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.oracular:tst:201245420000060",
						"comment": "linux-lowlatency package in oracular is affected and needs fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.oracular:tst:201245420000040",
						"comment": "linux-oracle package in oracular is affected and needs fixing."
					},
					{
						"test_ref": "oval:com.ubuntu.oracular:tst:201245420000050",
						"comment": "linux-raspi package in oracular is affected and needs fixing."
					}
				]
			}
		]
	}
}
