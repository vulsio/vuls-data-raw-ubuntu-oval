{
	"class": "vulnerability",
	"id": "oval:com.ubuntu.oracular:def:2024467870000000",
	"version": "1",
	"metadata": {
		"title": "CVE-2024-46787 on Ubuntu 24.10 (oracular) - medium",
		"description": "In the Linux kernel, the following vulnerability has been resolved:userfaultfd: fix checks for huge PMDsPatch series \"userfaultfd: fix races around pmd_trans_huge() check\", v2.The pmd_trans_huge() code in mfill_atomic() is wrong in three differentways depending on kernel version:1. The pmd_trans_huge() check is racy and can lead to a BUG_ON() (if youhit   the right two race windows) - I've tested this in a kernel build with   some extra mdelay() calls. See the commit message for a description   of the race scenario.   On older kernels (before 6.5), I think the same bug can even   theoretically lead to accessing transhuge page contents as a page table   if you hit the right 5 narrow race windows (I haven't tested this case).2. As pointed out by Qi Zheng, pmd_trans_huge() is not sufficient for   detecting PMDs that don't point to page tables.   On older kernels (before 6.5), you'd just have to win a single fairly   wide race to hit this.   I've tested this on 6.1 stable by racing migration (with a mdelay()   patched into try_to_migrate()) against UFFDIO_ZEROPAGE - on my x86   VM, that causes a kernel oops in ptlock_ptr().3. On newer kernels (>=6.5), for shmem mappings, khugepaged is allowed   to yank page tables out from under us (though I haven't tested that),   so I think the BUG_ON() checks in mfill_atomic() are just wrong.I decided to write two separate fixes for these (one fix for bugs 1+2, onefix for bug 3), so that the first fix can be backported to kernelsaffected by bugs 1+2.This patch (of 2):This fixes two issues.I discovered that the following race can occur:  mfill_atomic                other thread  ============                ============                              <zap PMD>  pmdp_get_lockless() [reads none pmd]  <bail if trans_huge>  <if none:>                              <pagefault creates transhuge zeropage>    __pte_alloc [no-op]                              <zap PMD>  <bail if pmd_trans_huge(*dst_pmd)>  BUG_ON(pmd_none(*dst_pmd))I have experimentally verified this in a kernel with extra mdelay() calls;the BUG_ON(pmd_none(*dst_pmd)) triggers.On kernels newer than commit 0d940a9b270b (\"mm/pgtable: allowpte_offset_map[_lock]() to fail\"), this can't lead to anything worse thana BUG_ON(), since the page table access helpers are actually designed todeal with page tables concurrently disappearing; but on older kernels(<=6.4), I think we could probably theoretically race past the twoBUG_ON() checks and end up treating a hugepage as a page table.The second issue is that, as Qi Zheng pointed out, there are other typesof huge PMDs that pmd_trans_huge() can't catch: devmap PMDs and swap PMDs(in particular, migration PMDs).On <=6.4, this is worse than the first issue: If mfill_atomic() runs on aPMD that contains a migration entry (which just requires winning a single,fairly wide race), it will pass the PMD to pte_offset_map_lock(), whichassumes that the PMD points to a page table.Breakage follows: First, the kernel tries to take the PTE lock (which willcrash or maybe worse if there is no \"struct page\" for the address bits inthe migration entry PMD - I think at least on X86 there usually is nocorresponding \"struct page\" thanks to the PTE inversion mitigation, amd64looks different).If that didn't crash, the kernel would next try to write a PTE into whatit wrongly thinks is a page table.As part of fixing these issues, get rid of the check for pmd_trans_huge()before __pte_alloc() - that's redundant, we're going to have to check forthat after the __pte_alloc() anyway.Backport note: pmdp_get_lockless() is pmd_read_atomic() in older kernels.\n\n    Update Instructions:\n\n    Run `sudo pro fix CVE-2024-46787` to fix the vulnerability. The problem can be corrected\n    by updating your system to the following package versions:\n\nlinux-image-6.11.0-7-generic - 6.11.0-7.7\nlinux-image-unsigned-6.11.0-7-generic - 6.11.0-7.7\nlinux-image-unsigned-6.11.0-7-generic-64k - 6.11.0-7.7\nNo subscription required\n\nlinux-image-unsigned-6.11.0-1002-aws - 6.11.0-1002.2\nNo subscription required\n\nlinux-image-unsigned-6.11.0-1003-azure - 6.11.0-1003.3\nNo subscription required\n\nlinux-image-unsigned-6.11.0-1001-gcp - 6.11.0-1001.1\nNo subscription required\n\nlinux-image-unsigned-6.11.0-1002-lowlatency - 6.11.0-1002.2\nlinux-image-unsigned-6.11.0-1002-lowlatency-64k - 6.11.0-1002.2\nNo subscription required\n\nlinux-image-unsigned-6.11.0-1004-oracle - 6.11.0-1004.4\nlinux-image-unsigned-6.11.0-1004-oracle-64k - 6.11.0-1004.4\nNo subscription required\n\nlinux-image-6.11.0-1003-raspi - 6.11.0-1003.3\nNo subscription required",
		"affected": {
			"family": "unix",
			"platform": "Ubuntu 24.10"
		},
		"reference": {
			"source": "CVE",
			"ref_id": "CVE-2024-46787",
			"ref_url": "https://www.cve.org/CVERecord?id=CVE-2024-46787"
		},
		"advisory": {
			"severity": "Medium",
			"rights": "Copyright (C) 2024 Canonical Ltd.",
			"public_date": "2024-09-18 08:15:00 UTC",
			"cve": {
				"text": "CVE-2024-46787",
				"href": "https://ubuntu.com/security/CVE-2024-46787",
				"public": "20240918",
				"cvss_score": "4.7",
				"cvss_vector": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:H",
				"usns": "7154-1,7155-1,7156-1,7154-2,7196-1"
			},
			"public_date_at_usn": "2024-09-18 08:15:00 UTC",
			"ref": [
				"https://ubuntu.com/security/notices/USN-7154-1",
				"https://ubuntu.com/security/notices/USN-7155-1",
				"https://ubuntu.com/security/notices/USN-7156-1",
				"https://ubuntu.com/security/notices/USN-7154-2",
				"https://ubuntu.com/security/notices/USN-7196-1"
			]
		}
	},
	"notes": {},
	"criteria": {
		"criterias": [
			{
				"operator": "OR",
				"criterions": [
					{
						"test_ref": "oval:com.ubuntu.oracular:tst:2020123510000000",
						"comment": "linux package in oracular, is related to the CVE in some way and has been fixed (note: '6.11.0-7.7')."
					},
					{
						"test_ref": "oval:com.ubuntu.oracular:tst:2020123510000010",
						"comment": "linux-aws package in oracular, is related to the CVE in some way and has been fixed (note: '6.11.0-1002.2')."
					},
					{
						"test_ref": "oval:com.ubuntu.oracular:tst:2020123510000020",
						"comment": "linux-azure package in oracular, is related to the CVE in some way and has been fixed (note: '6.11.0-1003.3')."
					},
					{
						"test_ref": "oval:com.ubuntu.oracular:tst:2020123510000030",
						"comment": "linux-gcp package in oracular, is related to the CVE in some way and has been fixed (note: '6.11.0-1001.1')."
					},
					{
						"test_ref": "oval:com.ubuntu.oracular:tst:2020123510000060",
						"comment": "linux-lowlatency package in oracular, is related to the CVE in some way and has been fixed (note: '6.11.0-1002.2')."
					},
					{
						"test_ref": "oval:com.ubuntu.oracular:tst:2020123510000040",
						"comment": "linux-oracle package in oracular, is related to the CVE in some way and has been fixed (note: '6.11.0-1004.4')."
					},
					{
						"test_ref": "oval:com.ubuntu.oracular:tst:2020123510000050",
						"comment": "linux-raspi package in oracular, is related to the CVE in some way and has been fixed (note: '6.11.0-1003.3')."
					}
				]
			}
		]
	}
}
