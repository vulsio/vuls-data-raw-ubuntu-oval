{
	"class": "vulnerability",
	"id": "oval:com.ubuntu.bionic:def:2022487600000000",
	"version": "1",
	"metadata": {
		"title": "CVE-2022-48760 on Ubuntu 18.04 FIPS Compliant (bionic) - medium",
		"description": "In the Linux kernel, the following vulnerability has been resolved: USB:core: Fix hang in usb_kill_urb by adding memory barriers The syzbot fuzzerhas identified a bug in which processes hang waiting for usb_kill_urb() toreturn. It turns out the issue is not unlinking the URB; that works justfine. Rather, the problem arises when the wakeup notification that the URBhas completed is not received. The reason is memory-access ordering on SMPsystems. In outline form, usb_kill_urb() and __usb_hcd_giveback_urb()operating concurrently on different CPUs perform the following actions: CPU0 CPU 1 ---------------------------- ---------------------------------usb_kill_urb(): __usb_hcd_giveback_urb(): ... ... atomic_inc(&urb->reject);atomic_dec(&urb->use_count); ... ... wait_event(usb_kill_urb_queue,atomic_read(&urb->use_count) == 0); if (atomic_read(&urb->reject))wake_up(&usb_kill_urb_queue); Confining your attention to urb->reject andurb->use_count, you can see that the overall pattern of accesses on CPU 0is: write urb->reject, then read urb->use_count; whereas the overallpattern of accesses on CPU 1 is: write urb->use_count, then readurb->reject. This pattern is referred to in memory-model circles as SB (for\"Store Buffering\"), and it is well known that without suitable enforcementof the desired order of accesses -- in the form of memory barriers -- it isentirely possible for one or both CPUs to execute their reads ahead oftheir writes. The end result will be that sometimes CPU 0 sees the oldun-decremented value of urb->use_count while CPU 1 sees the oldun-incremented value of urb->reject. Consequently CPU 0 ends up on the waitqueue and never gets woken up, leading to the observed hang inusb_kill_urb(). The same pattern of accesses occurs in usb_poison_urb() andthe failure pathway of usb_hcd_submit_urb(). The problem is fixed by addingsuitable memory barriers. To provide proper memory-access ordering in theSB pattern, a full barrier is required on both CPUs. The atomic_inc() andatomic_dec() accesses themselves don't provide any memory ordering, butsince they are present, we can use the optimized smp_mb__after_atomic()memory barrier in the various routines to obtain the desired effect. Thispatch adds the necessary memory barriers.",
		"affected": {
			"family": "unix",
			"platform": "Ubuntu 18.04 FIPS Compliant"
		},
		"reference": {
			"source": "CVE",
			"ref_id": "CVE-2022-48760",
			"ref_url": "https://www.cve.org/CVERecord?id=CVE-2022-48760"
		},
		"advisory": {
			"severity": "Medium",
			"rights": "Copyright (C) 2024 Canonical Ltd.",
			"public_date": "2024-06-20 12:15:00 UTC",
			"cve": {
				"text": "CVE-2022-48760",
				"href": "https://ubuntu.com/security/CVE-2022-48760",
				"public": "20240620"
			}
		}
	},
	"notes": {},
	"criteria": {
		"criterias": [
			{
				"operator": "OR",
				"criterions": [
					{
						"test_ref": "oval:com.ubuntu.bionic:tst:201245420000350",
						"comment": "linux-fips package in fips-updates/bionic is affected. An update containing the fix has been completed and is pending publication (note: '4.15.0-1084.93')."
					},
					{
						"test_ref": "oval:com.ubuntu.bionic:tst:201245420000320",
						"comment": "linux-aws-fips package in fips-updates/bionic is affected. An update containing the fix has been completed and is pending publication (note: '4.15.0-2066.69')."
					},
					{
						"test_ref": "oval:com.ubuntu.bionic:tst:201245420000330",
						"comment": "linux-azure-fips package in fips-updates/bionic is affected. An update containing the fix has been completed and is pending publication (note: '4.15.0-2048.52')."
					},
					{
						"test_ref": "oval:com.ubuntu.bionic:tst:201245420000340",
						"comment": "linux-gcp-fips package in fips-updates/bionic is affected. An update containing the fix has been completed and is pending publication (note: '4.15.0-2031.34')."
					}
				]
			}
		]
	}
}
