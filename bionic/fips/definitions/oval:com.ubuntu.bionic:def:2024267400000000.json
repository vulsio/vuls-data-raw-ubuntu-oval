{
	"class": "vulnerability",
	"id": "oval:com.ubuntu.bionic:def:2024267400000000",
	"version": "1",
	"metadata": {
		"title": "CVE-2024-26740 on Ubuntu 18.04 FIPS Certified (bionic) - medium",
		"description": "In the Linux kernel, the following vulnerability has been resolved:net/sched: act_mirred: use the backlog for mirred ingress The test Davideadded in commit ca22da2fbd69 (\"act_mirred: use the backlog for nested callsto mirred ingress\") hangs our testing VMs every 10 or so runs, with thefamiliar tcp_v4_rcv -> tcp_v4_rcv deadlock reported by lockdep. The problemas previously described by Davide (see Link) is that if we reverse flow oftraffic with the redirect (egress -> ingress) we may reach the same socketwhich generated the packet. And we may still be holding its socket lock.The common solution to such deadlocks is to put the packet in the Rxbacklog, rather than run the Rx path inline. Do that for all egress ->ingress reversals, not just once we started to nest mirred calls. In thepast there was a concern that the backlog indirection will lead to loss oferror reporting / less accurate stats. But the current workaround does notseem to address the issue.",
		"affected": {
			"family": "unix",
			"platform": "Ubuntu 18.04 FIPS Certified"
		},
		"reference": {
			"source": "CVE",
			"ref_id": "CVE-2024-26740",
			"ref_url": "https://www.cve.org/CVERecord?id=CVE-2024-26740"
		},
		"advisory": {
			"severity": "Medium",
			"rights": "Copyright (C) 2024 Canonical Ltd.",
			"public_date": "2024-04-03 17:15:00 UTC",
			"cve": {
				"text": "CVE-2024-26740",
				"href": "https://ubuntu.com/security/CVE-2024-26740",
				"public": "20240403"
			}
		}
	},
	"notes": {},
	"criteria": {
		"criterias": [
			{
				"operator": "OR",
				"criterions": [
					{
						"test_ref": "oval:com.ubuntu.bionic:tst:201585530000010",
						"comment": "linux-fips package in fips/bionic is affected and may need fixing."
					}
				]
			}
		]
	}
}
